{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/chart.js\";\nimport { Component } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props); //data\n\n    this.state = {//Default state initialization\n    };\n  }\n\n  function() {\n    console.log(\"Hi! :)\");\n  }\n\n  render() {\n    console.log(this.props.data.length);\n    return /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 750,\n      height: 450,\n      data: this.props.data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        type: \"number\",\n        domain: ['dataMin', 'dataMax'],\n        dataKey: \"t\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        type: \"number\",\n        domain: ['auto', 'auto'],\n        dataKey: \"p\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"p\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/chart.js"],"names":["Component","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Chart","constructor","props","state","function","console","log","render","data","length","top","right","left","bottom"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SACIC,SADJ,EACeC,IADf,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,OADlD,EAC2DC,MAD3D,QAES,UAFT;;AAIA,MAAMC,KAAN,SAAoBR,SAApB,CAA6B;AACzBS,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;;AAEA,SAAKC,KAAL,GAAa,CACT;AADS,KAAb;AAGH;;AAEDC,EAAAA,QAAQ,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWM,IAAX,CAAgBC,MAA5B;AACA,wBACA,QAAC,SAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAE,KAAKP,KAAL,CAAWM,IAHrB;AAII,MAAA,MAAM,EAAE;AACRE,QAAAA,GAAG,EAAE,CADG;AACAC,QAAAA,KAAK,EAAE,EADP;AACWC,QAAAA,IAAI,EAAE,EADjB;AACqBC,QAAAA,MAAM,EAAE;AAD7B,OAJZ;AAAA,8BAQI,QAAC,aAAD;AAAe,QAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CAA7B;AAAqD,QAAA,OAAO,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,CAA7B;AAA+C,QAAA,OAAO,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,GAA9B;AAAkC,QAAA,MAAM,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAeH;;AA/BwB;;AAkC7B,eAAeb,KAAf","sourcesContent":["import {Component} from \"react\";\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  } from 'recharts';\n\nclass Chart extends Component{\n    constructor(props){\n        super(props);\n        //data\n\n        this.state = {\n            //Default state initialization\n        }\n    }\n\n    function(){\n        console.log(\"Hi! :)\")\n    }\n\n    render() {\n        console.log(this.props.data.length)\n        return (\n        <LineChart\n            width={750}\n            height={450}\n            data={this.props.data}\n            margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n            }}\n        >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" domain={['dataMin', 'dataMax']} dataKey=\"t\" />\n            <YAxis type=\"number\" domain={['auto', 'auto']} dataKey=\"p\" />\n            <Line type=\"monotone\" dataKey=\"p\" stroke=\"#82ca9d\" />\n        </LineChart>\n        );\n    }\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}