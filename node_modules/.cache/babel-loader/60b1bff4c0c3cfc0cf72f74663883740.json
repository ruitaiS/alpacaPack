{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/barV2.js\";\nimport { Component } from \"react\";\n\nclass PCTBar extends Component {\n  constructor(props) {\n    super(props); //pctChange\n    //width\n    //scale\n\n    this.styling = this.styling.bind(this);\n    this.state = {}; // //Bind this to its functions\n    // this.click = this.click.bind(this)\n    // this.mouseOver = this.mouseOver.bind(this)\n    // this.mouseOut = this.mouseOut.bind(this)\n    // let health = 100\n    // let color = \"green\"\n    // let healthBarText = buttonText - this.state.price\n  }\n\n  bgColor(pctChange) {\n    if (pctChange < 0) {\n      return \"red\";\n    } else {\n      return \"green\";\n    }\n  }\n\n  styling(pctChange) {\n    let barWidth = this.props.maxWidth * Math.abs(pctChange) * this.props.scale;\n\n    if (pctChange > 0) {\n      //Positive Change\n      //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.maxWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.styling(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PCTBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/barV2.js"],"names":["Component","PCTBar","constructor","props","styling","bind","state","bgColor","pctChange","barWidth","maxWidth","Math","abs","scale","transform","height","width","backgroundColor","render"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA8B;AAC1BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;AACA;AACA;;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,KAAL,GAAa,EAAb,CANc,CASd;AACA;AACA;AACA;AAEA;AACA;AACA;AAEH;;AAEDC,EAAAA,OAAO,CAACC,SAAD,EAAW;AACd,QAAIA,SAAS,GAAG,CAAhB,EAAkB;AACd,aAAO,KAAP;AACH,KAFD,MAEK;AACD,aAAO,OAAP;AACH;AACJ;;AAEDJ,EAAAA,OAAO,CAACI,SAAD,EAAW;AACd,QAAIC,QAAQ,GAAG,KAAKN,KAAL,CAAWO,QAAX,GAAsBC,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAtB,GAA4C,KAAKL,KAAL,CAAWU,KAAtE;;AAEA,QAAIL,SAAS,GAAG,CAAhB,EAAkB;AACd;AACA;AACA,aAAM;AAACM,QAAAA,SAAS,EAAG,aAAY,KAAKX,KAAL,CAAWO,QAAS,UAA7C;AAAwDK,QAAAA,MAAM,EAAE,MAAhE;AAAwEC,QAAAA,KAAK,EAAG,GAAEP,QAAS,IAA3F;AAAgGQ,QAAAA,eAAe,EAAE;AAAjH,OAAN;AACH,KAJD,MAIK;AACD;AACA;AACA,aAAM;AAACH,QAAAA,SAAS,EAAG,aAAY,KAAKX,KAAL,CAAWO,QAAX,GAAsBD,QAAS,UAAxD;AAAmEM,QAAAA,MAAM,EAAE,MAA3E;AAAmFC,QAAAA,KAAK,EAAG,GAAEP,QAAS,IAAtG;AAA2GQ,QAAAA,eAAe,EAAE;AAA5H,OAAN;AACH;AAIJ;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,6BACI;AAAK,QAAA,KAAK,EAAE,KAAKd,OAAL,CAAa,KAAKD,KAAL,CAAWK,SAAxB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AArDyB;;AAwD9B,eAAeP,MAAf","sourcesContent":["import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //width\n        //scale\n        this.styling = this.styling.bind(this);\n        this.state = {\n        }\n\n        // //Bind this to its functions\n        // this.click = this.click.bind(this)\n        // this.mouseOver = this.mouseOver.bind(this)\n        // this.mouseOut = this.mouseOut.bind(this)\n\n        // let health = 100\n        // let color = \"green\"\n        // let healthBarText = buttonText - this.state.price\n\n    }\n\n    bgColor(pctChange){\n        if (pctChange < 0){\n            return \"red\"\n        }else{\n            return \"green\"\n        }\n    }\n\n    styling(pctChange){\n        let barWidth = this.props.maxWidth * Math.abs(pctChange) * this.props.scale\n\n        if (pctChange > 0){\n            //Positive Change\n            //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n\n        \n        \n    }\n\n    render(){\n        return(\n            <div>\n                <div style={this.styling(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;"]},"metadata":{},"sourceType":"module"}