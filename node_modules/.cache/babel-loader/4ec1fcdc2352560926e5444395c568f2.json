{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/strats/bump.js\";\nimport { Component } from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar'; //Automatically place limit sell at buy price + delta\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n//Use all available capital to purchase at that price\n//Shares = capital / price\n//Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n//Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n//Place limit order to liquidate\n//limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n//Considerations:\n//Track session percent gains\n//Changing capital allocation should reset session gain tracking\n//Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\nclass BumpStrat extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n    //api - alpaca trade api\n    //ticker - symbol that we're trading on\n    //value - current price of the asset\n    //positions\n    //Functions that need to get bound to this instance\n\n    this.deltaChange = this.deltaChange.bind(this);\n    this.capChange = this.capChange.bind(this);\n    this.autoSellChange = this.autoSellChange.bind(this);\n    this.click = this.click.bind(this);\n    this.apiConfirm = this.apiConfirm.bind(this);\n    this.logOrders = this.logOrders.bind(this);\n    this.test = this.test.bind(this);\n    this.openOrders = {};\n    this.state = {\n      capital: 10000,\n      shares: 0,\n      autoSell: false,\n      fracShares: false,\n      delta: 0.01,\n      openOrders: {},\n      status: \"out\" //out, in, waiting-entry, waiting-exit\n\n    };\n  }\n\n  test() {\n    console.log(this.props.positions);\n  }\n\n  deltaChange(e) {\n    this.setState({\n      delta: e.target.value\n    });\n    console.log(`New Delta: ${this.state.delta}`);\n  }\n\n  capChange(e) {\n    this.setState({\n      capital: e.target.value\n    });\n    console.log(`New Starting Allocation: ${this.state.capital}`); //Reset the statistics too\n  }\n\n  autoSellChange(e) {\n    this.setState({\n      autoSell: e.target.checked\n    });\n    console.log(`AutoSell set to ${this.state.autoSell}`);\n  } //This is kind of shitty because it will do it even when it's just the price data changing\n  //Ideally you want to call a function in bump from the parent component\n\n\n  componentDidUpdate(prevProps) {\n    //Not sure why, but this seems to only fire when an order is filled, partially filled, or cancelled\n    //Eg. When an order is closed\n    if (prevProps.positions !== this.props.positions) {\n      //console.log(\"bump/componentDidUpdate: Orders changed\")\n      //console.log(`bump/componentDidUpdate: Positions changed from ${JSON.stringify(prevProps.positions)} to ${JSON.stringify(this.props.positions)}`)\n      if (prevProps.positions.qty === 0 && this.props.positions.qty !== 0) {\n        console.log(`bump/componentDidUpdate: Bought ${this.props.positions.qty} shares at ${this.props.positions.entry_price} per share`);\n        this.setState({\n          capital: this.state.capital - this.props.positions.qty * this.props.positions.entry_price\n        });\n        this.setState({\n          shares: this.props.positions.qty\n        });\n      } else if (prevProps.positions.qty !== 0 && this.props.positions.qty === 0) {\n        console.log(`bump/componentDidUpdate: Sold ${prevProps.positions.qty} shares at ${this.props.positions.exit_price} per share`);\n        this.setState({\n          capital: this.state.capital + prevProps.positions.qty * this.props.positions.exit_price\n        });\n        this.setState({\n          shares: 0\n        });\n      }\n\n      for (let id of Object.keys(this.openOrders)) {\n        if (this.props.positions.orders.id == null) {\n          console.log(`bump/componentDidUpdate: Removing order ${id} from openOrders`);\n          delete this.openOrders[id];\n        }\n      }\n\n      this.setState({\n        openOrders: this.openOrders\n      });\n    } //Check if any orders went from open to closed\n\n  }\n\n  logOrders() {\n    console.log(`bump/logOrders: ${JSON.stringify(this.state.openOrders)}`);\n\n    if (this.state.openOrders == null) {\n      console.log(`bump/logOrders: No open orders for ${this.props.ticker}`);\n    } else if (Object.keys(this.state.openOrders).length !== 0) {\n      console.log(`bump/logOrders: Currently Open Orders for ${this.props.ticker}: ${JSON.stringify(this.state.openOrders)}`);\n    }\n  }\n\n  apiConfirm(msg) {\n    //API buy callback; stores the confirmation info\n    //TODO: make sure it works for cancellations too\n    //When cancelling, I think it gives an empty array if there are no orders to cancel\n    //AFAIK, if it returns an empty message it means nothing happened, so whatever you tried to do didn't work\n    //In these scenarios it returns false and exist\n    //Otherwise it updates the openorders, \n    if (msg === \"\" || msg === \"[]\") {\n      console.log(\"bump/apiConfirm: No message\");\n      return false;\n    } else {\n      console.log(`bump/apiConfirm: Alpaca API Callback: ${msg}`);\n      let data = JSON.parse(msg);\n\n      if (!Array.isArray(data)) {\n        data = [data];\n      }\n\n      for (let datum of data) {\n        //Cancel response nests the info within the body, so we need to extract\n        if (datum.body != null) {\n          this.openOrders[datum.id] = {\n            [datum.body.side]: datum.body.qty,\n            price: datum.body.limit_price,\n            status: datum.body.status\n          };\n          console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.body.side} ${datum.body.qty} shares of ${datum.body.symbol} for ${datum.body.limit_price}. Status: ${datum.body.status}`);\n        } else {\n          this.openOrders[datum.id] = {\n            [datum.side]: datum.qty,\n            price: datum.limit_price,\n            status: datum.status\n          };\n          console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.side} ${datum.qty} shares of ${datum.symbol} for ${datum.limit_price}. Status: ${datum.status}`);\n        }\n\n        this.setState({\n          openOrders: this.openOrders\n        });\n      } //this.logOrders()\n\n\n      return true;\n    }\n  }\n\n  click(price) {\n    //if waiting to complete an order, then clicking will cancel it\n    //if not in a position, then it will place a buy\n    //if in a position, then it will place a sell\n    if (Object.keys(this.state.openOrders).length !== 0) {\n      //TODO: Cancel by order ID, rather than cancel all\n      //this.props.api.cancel((msg)=>this.apiConfirm(msg))\n      //Not sure why this version doesn't iterate,\n      //since it's the same one used elsewhere to iterate keys...\n      //for (let id of this.state.openOrders){\n      for (let id of Object.keys(this.state.openOrders)) {\n        console.log(`bump/click: Cancelling order: ${id}`);\n        this.props.api.cancelOrder(id, this.apiConfirm);\n      }\n\n      console.log(`bump/click: Open Orders: ${JSON.stringify(this.state.openOrders)}`); //Rather than cancel, you could instead update the order to use the most recent price\n      //We already have a seperate cancel button\n    } else {\n      if (this.props.positions.qty === 0) {\n        //Place a limit buy order\n        //On completion, place limit sell @ delta\n        let symbol = this.props.ticker;\n        let qty = Math.floor(this.state.capital / price);\n        let type = \"limit\";\n        let time_in_force = \"day\";\n\n        if (qty === 0) {\n          alert(\"Not Enough Capital to Purchase any Shares\");\n        } else {\n          this.props.api.buy(msg => this.apiConfirm(msg), symbol, qty, type, price, time_in_force);\n        }\n      } else {\n        //place a limit sell\n        let symbol = this.props.ticker;\n        let qty = this.props.positions.qty;\n        let type = \"limit\";\n        let time_in_force = \"day\";\n        this.props.api.sell(msg => this.apiConfirm(msg), symbol, qty, type, price, time_in_force);\n      }\n    }\n    /*\n    if (this.state.status === \"out\"){\n        //Place a limit buy order\n        //On completion, place limit sell @ delta\n        let symbol = this.props.ticker\n        let qty = Math.floor(this.state.capital / price)\n        let type = \"limit\"\n        let time_in_force = \"gtc\"\n        this.props.api.buy((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n        \n    }else if (this.state.status === \"in\"){\n        //Place limit sell\n     }else if (this.state.status === \"waiting-entry\"){\n        //Cancel existing buy order\n     }else if (this.state.status === \"waiting-exit\"){\n        //Cancel sell order\n        //\n    }*/\n\n  }\n\n  render() {\n    let buttonText; //Mar 5: This text won't reset after exiting positions\n\n    if (Object.keys(this.state.openOrders).length === 0) {\n      if (this.props.positions.qty === 0) {\n        buttonText = \"Enter\";\n      } else {\n        buttonText = \"Exit\";\n      }\n    } else {\n      //Todo: format this\n      buttonText = \"Cancel\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Bump Strat\", /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"inputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: `Current Price: $${this.props.value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n          pctChange: \"0.1\",\n          width: \"500\",\n          height: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), \"Capital: $\", this.state.capital, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), \"Shares: \", this.props.positions.qty, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: \"Capital Allocation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this), Object.keys(this.state.openOrders).length === 0 && this.props.positions.qty === 0 ? /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.capital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.capital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Auto Sell:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"autoSell\",\n              type: \"checkbox\",\n              checked: this.state.autoSell,\n              onChange: this.autoSellChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: [\"Delta: $\", this.state.delta]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            step: 0.01,\n            value: this.state.delta,\n            className: \"slider\",\n            id: \"slider\",\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.delta,\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PriceBtn, {\n          text: buttonText,\n          click: this.click,\n          value: this.props.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.logOrders,\n          children: \"Log Open Orders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.test,\n          children: \"Test Function\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.api.cancel(msg => this.apiConfirm(msg)),\n          children: \"Cancel All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BumpStrat;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/strats/bump.js"],"names":["Component","PriceBtn","PCTBar","BumpStrat","constructor","props","deltaChange","bind","capChange","autoSellChange","click","apiConfirm","logOrders","test","openOrders","state","capital","shares","autoSell","fracShares","delta","status","console","log","positions","e","setState","target","value","checked","componentDidUpdate","prevProps","qty","entry_price","exit_price","id","Object","keys","orders","JSON","stringify","ticker","length","msg","data","parse","Array","isArray","datum","body","side","price","limit_price","symbol","api","cancelOrder","Math","floor","type","time_in_force","alert","buy","sell","render","buttonText","float","width","textAlign","cancel"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar';\n\n//Automatically place limit sell at buy price + delta\n\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n    //Use all available capital to purchase at that price\n    //Shares = capital / price\n    //Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n    //Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n    //Place limit order to liquidate\n    //limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n\n//Considerations:\n//Track session percent gains\n    //Changing capital allocation should reset session gain tracking\n    //Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\n\n\nclass BumpStrat extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n        //api - alpaca trade api\n        //ticker - symbol that we're trading on\n        //value - current price of the asset\n\n        //positions\n        \n\n        //Functions that need to get bound to this instance\n        this.deltaChange = this.deltaChange.bind(this);\n        this.capChange = this.capChange.bind(this);\n        this.autoSellChange = this.autoSellChange.bind(this);\n\n\n        this.click = this.click.bind(this);\n        this.apiConfirm = this.apiConfirm.bind(this);\n        this.logOrders = this.logOrders.bind(this);\n\n        this.test = this.test.bind(this);\n\n        this.openOrders = {}\n        this.state = {\n            capital: 10000,\n            shares: 0,\n\n            autoSell: false,\n            fracShares: false,\n            delta: 0.01,\n\n            openOrders: {},\n            status: \"out\", //out, in, waiting-entry, waiting-exit\n\n            \n        }\n    }\n\n    test(){\n        console.log(this.props.positions)\n    }\n\n    deltaChange(e){\n        this.setState({delta: e.target.value})\n        console.log(`New Delta: ${this.state.delta}`)\n    }\n\n    capChange(e){\n        this.setState({capital: e.target.value})\n        console.log(`New Starting Allocation: ${this.state.capital}`)\n        //Reset the statistics too\n    }\n\n    autoSellChange(e){\n        this.setState({autoSell: e.target.checked})\n        console.log(`AutoSell set to ${this.state.autoSell}`)\n    }\n\n    //This is kind of shitty because it will do it even when it's just the price data changing\n    //Ideally you want to call a function in bump from the parent component\n    componentDidUpdate(prevProps){\n\n        //Not sure why, but this seems to only fire when an order is filled, partially filled, or cancelled\n        //Eg. When an order is closed\n        if (prevProps.positions !== this.props.positions){\n            //console.log(\"bump/componentDidUpdate: Orders changed\")\n            //console.log(`bump/componentDidUpdate: Positions changed from ${JSON.stringify(prevProps.positions)} to ${JSON.stringify(this.props.positions)}`)\n\n            \n            if(prevProps.positions.qty === 0 && this.props.positions.qty !== 0){\n                console.log(`bump/componentDidUpdate: Bought ${this.props.positions.qty} shares at ${this.props.positions.entry_price} per share`)\n                this.setState({capital: this.state.capital - (this.props.positions.qty * this.props.positions.entry_price)})\n                this.setState({shares: this.props.positions.qty})\n            }else if (prevProps.positions.qty !== 0 && this.props.positions.qty === 0){\n                console.log(`bump/componentDidUpdate: Sold ${prevProps.positions.qty} shares at ${this.props.positions.exit_price} per share`)\n                this.setState({capital: this.state.capital + (prevProps.positions.qty * this.props.positions.exit_price)})\n                this.setState({shares: 0})\n            }\n\n\n            for (let id of Object.keys(this.openOrders)){\n                if (this.props.positions.orders.id == null){\n                    console.log(`bump/componentDidUpdate: Removing order ${id} from openOrders`)\n                    delete this.openOrders[id]\n                }\n            }\n            this.setState({openOrders: this.openOrders})\n        }\n\n        //Check if any orders went from open to closed\n    }\n\n    logOrders(){\n\n        console.log(`bump/logOrders: ${JSON.stringify(this.state.openOrders)}`)\n        if (this.state.openOrders == null){\n            console.log(`bump/logOrders: No open orders for ${this.props.ticker}`)\n        }\n        else if (Object.keys(this.state.openOrders).length !== 0){\n            console.log(`bump/logOrders: Currently Open Orders for ${this.props.ticker}: ${JSON.stringify(this.state.openOrders)}`)\n        }\n    }\n\n    apiConfirm(msg){\n        //API buy callback; stores the confirmation info\n        //TODO: make sure it works for cancellations too\n\n        //When cancelling, I think it gives an empty array if there are no orders to cancel\n\n        //AFAIK, if it returns an empty message it means nothing happened, so whatever you tried to do didn't work\n        //In these scenarios it returns false and exist\n        //Otherwise it updates the openorders, \n\n        if (msg === \"\" || msg === \"[]\"){\n            console.log(\"bump/apiConfirm: No message\")\n            return false\n        }else{\n\n            console.log(`bump/apiConfirm: Alpaca API Callback: ${msg}`)\n            let data = JSON.parse(msg)\n            if (!Array.isArray(data)){\n                data = [data]\n            }\n\n            for (let datum of data){\n                //Cancel response nests the info within the body, so we need to extract\n                if(datum.body != null){\n                    this.openOrders[datum.id]= {[datum.body.side]: datum.body.qty, price: datum.body.limit_price, status: datum.body.status}\n                    console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.body.side} ${datum.body.qty} shares of ${datum.body.symbol} for ${datum.body.limit_price}. Status: ${datum.body.status}`)                    \n                }else{\n                    this.openOrders[datum.id]= {[datum.side]: datum.qty, price: datum.limit_price, status: datum.status}\n                    console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.side} ${datum.qty} shares of ${datum.symbol} for ${datum.limit_price}. Status: ${datum.status}`)\n                }\n                this.setState({openOrders: this.openOrders})\n            }\n\n            //this.logOrders()\n\n            return true\n        }\n    }\n\n    click(price){\n\n        //if waiting to complete an order, then clicking will cancel it\n        //if not in a position, then it will place a buy\n        //if in a position, then it will place a sell\n\n        if (Object.keys(this.state.openOrders).length !== 0){\n            //TODO: Cancel by order ID, rather than cancel all\n            //this.props.api.cancel((msg)=>this.apiConfirm(msg))\n\n            //Not sure why this version doesn't iterate,\n            //since it's the same one used elsewhere to iterate keys...\n            //for (let id of this.state.openOrders){\n\n            for (let id of Object.keys(this.state.openOrders)){\n                console.log(`bump/click: Cancelling order: ${id}`)\n                this.props.api.cancelOrder(id, this.apiConfirm)\n            }\n\n            console.log(`bump/click: Open Orders: ${JSON.stringify(this.state.openOrders)}`)\n\n            //Rather than cancel, you could instead update the order to use the most recent price\n            //We already have a seperate cancel button\n        }else{\n            if (this.props.positions.qty === 0){\n                //Place a limit buy order\n                //On completion, place limit sell @ delta\n                let symbol = this.props.ticker\n                let qty = Math.floor(this.state.capital / price)\n                let type = \"limit\"\n                let time_in_force = \"day\"\n                if(qty === 0){\n                    alert(\"Not Enough Capital to Purchase any Shares\")\n                }else{\n                    this.props.api.buy((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n                }\n                \n            }else{\n                //place a limit sell\n                let symbol = this.props.ticker\n                let qty = this.props.positions.qty\n                let type = \"limit\"\n                let time_in_force = \"day\"\n                this.props.api.sell((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n            }    \n        }\n\n        /*\n        if (this.state.status === \"out\"){\n            //Place a limit buy order\n            //On completion, place limit sell @ delta\n            let symbol = this.props.ticker\n            let qty = Math.floor(this.state.capital / price)\n            let type = \"limit\"\n            let time_in_force = \"gtc\"\n            this.props.api.buy((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n            \n        }else if (this.state.status === \"in\"){\n            //Place limit sell\n\n        }else if (this.state.status === \"waiting-entry\"){\n            //Cancel existing buy order\n\n        }else if (this.state.status === \"waiting-exit\"){\n            //Cancel sell order\n            //\n        }*/\n    }\n\n    render(){\n        let buttonText\n        \n        //Mar 5: This text won't reset after exiting positions\n        if (Object.keys(this.state.openOrders).length === 0){\n            if(this.props.positions.qty === 0){\n                buttonText = \"Enter\"    \n            }else{\n                buttonText = \"Exit\"\n            }\n            \n        }else{\n            //Todo: format this\n            buttonText = \"Cancel\"\n            \n        }\n\n        return(\n            <div>\n                Bump Strat\n                <fieldset className=\"inputBox\">\n                    <legend>{`Current Price: $${this.props.value}`}</legend>\n                    <PCTBar pctChange=\"0.1\" width=\"500\" height=\"50\"/>\n\n                    Capital: ${this.state.capital}\n                    <br></br>\n                    Shares: {this.props.positions.qty}\n\n                    <div>\n                        <label htmlFor=\"slider\">Capital Allocation</label>\n                        {/*Conditionally disable if we're in a position */}\n                        {(Object.keys(this.state.openOrders).length === 0 && this.props.positions.qty === 0) ? \n                            <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                            :\n                            <input disabled style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                        }\n                    </div>\n\n                    <div>\n                    <label>\n                        Auto Sell:\n                        <input name=\"autoSell\" type=\"checkbox\" checked={this.state.autoSell} onChange={this.autoSellChange} />\n                    </label>\n                    </div>\n\n                    <div>\n                        <label htmlFor=\"slider\">Delta: ${this.state.delta}</label>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} type=\"range\" min=\"0\" max=\"10\" step={0.01} value={this.state.delta} className=\"slider\" id=\"slider\" onChange={this.deltaChange}/>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.delta} onChange={this.deltaChange}/>\n                    </div>\n\n                    <PriceBtn text={buttonText} click={this.click} value={this.props.value}/>\n                    <button onClick={this.logOrders}>Log Open Orders</button>\n                    <button onClick={this.test}>Test Function</button>\n                    <button onClick={()=>this.props.api.cancel((msg)=>this.apiConfirm(msg))}>Cancel All</button>\n                    \n                </fieldset>\n            </div>\n        )\n        \n    }\n}\n\nexport default BumpStrat;"]},"metadata":{},"sourceType":"module"}