{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/stream.js\";\n//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\nimport { Component } from \"react\";\nimport PCTBar from './pctBar';\n\nclass Stream extends Component {\n  constructor(props) {\n    super(props); //key_id\n    //secret_key\n    //ticker\n    //fakePCT\n\n    this.ws = new WebSocket('wss://socket.polygon.io/stocks');\n    this.state = {\n      //currPrice\n      //holdPrice\n      pct: null,\n      //Testing Buy / Sell Code\n      boughtAt: null,\n      soldAt: null,\n      pctGain: 1\n    }; //Bind this to its functions\n\n    this.click = this.click.bind(this);\n    this.mouseOver = this.mouseOver.bind(this);\n    this.mouseOut = this.mouseOut.bind(this);\n  } //Stocks Websocket\n\n\n  //Forex Websocket\n  //ws = new WebSocket('wss://socket.polygon.io/forex')\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('connected');\n      let auth_data = {\n        \"action\": \"auth\",\n        \"params\": this.props.key_id\n      };\n      this.ws.send(JSON.stringify(auth_data));\n      let listen_message = {\n        \"action\": \"subscribe\",\n        \"params\": \"T.\" + this.props.ticker\n      };\n      this.ws.send(JSON.stringify(listen_message));\n    };\n\n    this.ws.onmessage = evt => {\n      let data = JSON.parse(evt.data); //console.log(data[0].p)\n\n      this.setState({\n        currPrice: data[0].p\n      });\n\n      if (this.state.boughtAt != null) {\n        //Currently in a position\n        this.setState({\n          pct: (this.state.currPrice - this.state.boughtAt) / this.state.boughtAt\n        });\n      } else {\n        //Not in a position; only update pct if holding price\n        if (this.state.holdPrice != null) {\n          //Inverted PCT\n          //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n          //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n          this.setState({\n            pct: (this.state.holdPrice - this.state.currPrice) / this.state.holdPrice\n          });\n        }\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  mouseOver() {\n    //Store current stream price\n    //We want this to only run once, and then stop updating\n    console.log(\"Mouseover\");\n    this.setState({\n      holdPrice: this.state.currPrice\n    }); //TODO: If you're in a position, and you do mouseover\n    //Show the change from buy-in to hold price in one color,\n    //change from hold price to current price in another color\n  }\n\n  mouseOut() {\n    //Reset / remove holdPrice\n    console.log(\"MouseOut\");\n    this.setState({\n      pct: null\n    });\n    this.setState({\n      holdPrice: null\n    });\n  }\n\n  click() {\n    //Place a limit order at the holdPrice\n    console.log(\"Clicked\");\n    this.mouseOver(); //this.setState({holdPrice: this.state.price})\n    //console.log(this.state.test)\n\n    if (this.state.boughtAt != null) {\n      //Already in a position -> Clicking exits\n      if (this.state.currPrice >= this.state.holdPrice) {\n        this.setState({\n          pctGain: 1 + this.state.pct\n        });\n        this.setState({\n          soldAt: this.state.currPrice\n        });\n        this.setState({\n          boughtAt: null\n        });\n      }\n    } else {\n      //Not in a position -> Clicking enters\n      if (this.state.currPrice <= this.state.holdPrice) {\n        this.setState({\n          boughtAt: this.state.currPrice\n        });\n      }\n    }\n  }\n\n  render() {\n    let preText;\n    let buttonText;\n    let overText;\n\n    if (this.state.boughtAt != null) {\n      preText = \"Buy At: \";\n    } else {\n      preText = \"Sell At: \";\n    }\n\n    if (this.state.currPrice != null) {\n      overText = this.state.currPrice.toFixed(2);\n      buttonText = `${preText} ${this.state.currPrice.toFixed(2)}`;\n    }\n\n    if (this.state.holdPrice != null) {\n      buttonText = this.state.holdPrice.toFixed(2);\n    } //Use this.state.pct in place of this.props.fakePCT for live testing\n    //First PCT bar shows gains, second is to show price changes\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PCTBar, {\n        maxWidth: \"270\",\n        pctChange: this.state.pctGain - 1,\n        scale: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"`Bought at: $\", this.state.boughtAt, \"`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"`Sold at: $\", this.state.soldAt, \"`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n        maxWidth: \"270\",\n        pctChange: this.state.pct,\n        scale: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: overText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"streamBtn\",\n          onClick: this.click,\n          onMouseOver: this.mouseOver,\n          onMouseOut: this.mouseOut,\n          children: buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["Component","PCTBar","Stream","constructor","props","ws","WebSocket","state","pct","boughtAt","soldAt","pctGain","click","bind","mouseOver","mouseOut","componentDidMount","onopen","console","log","auth_data","key_id","send","JSON","stringify","listen_message","ticker","onmessage","evt","data","parse","setState","currPrice","p","holdPrice","onclose","render","preText","buttonText","overText","toFixed"],"mappings":"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","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\nimport {Component} from \"react\";\nimport PCTBar from './pctBar';\n\nclass Stream extends Component {\n    constructor(props){\n        super(props);\n        //key_id\n        //secret_key\n        //ticker\n        //fakePCT\n        this.state = {\n            //currPrice\n            //holdPrice\n            pct: null,\n\n\n            //Testing Buy / Sell Code\n            boughtAt: null,\n            soldAt: null,\n            pctGain: 1,\n        }\n\n        //Bind this to its functions\n        this.click = this.click.bind(this)\n        this.mouseOver = this.mouseOver.bind(this)\n        this.mouseOut = this.mouseOut.bind(this)\n    }\n\n    //Stocks Websocket\n    ws = new WebSocket('wss://socket.polygon.io/stocks')\n\n    //Forex Websocket\n    //ws = new WebSocket('wss://socket.polygon.io/forex')\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n        console.log('connected')\n\n        let auth_data = {\"action\":\"auth\",\"params\": this.props.key_id}\n        this.ws.send(JSON.stringify(auth_data))\n\n        let listen_message = {\"action\":\"subscribe\",\"params\":\"T.\"+this.props.ticker}\n        this.ws.send(JSON.stringify(listen_message))\n\n\n        }\n\n        this.ws.onmessage = evt => {\n\n        let data = JSON.parse(evt.data)\n        //console.log(data[0].p)\n\n        this.setState({currPrice: data[0].p})\n\n        if (this.state.boughtAt != null){ //Currently in a position\n            this.setState({pct: (this.state.currPrice - this.state.boughtAt)/ this.state.boughtAt})\n        }else{ //Not in a position; only update pct if holding price\n            if (this.state.holdPrice != null){\n                //Inverted PCT\n                //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n                //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n                this.setState({pct: (this.state.holdPrice-this.state.currPrice)/ this.state.holdPrice})\n            }\n        }\n\n\n\n        }\n\n        this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n\n    }\n\n    mouseOver(){\n        //Store current stream price\n        //We want this to only run once, and then stop updating\n        console.log(\"Mouseover\")\n        this.setState({holdPrice: this.state.currPrice})\n\n        //TODO: If you're in a position, and you do mouseover\n        //Show the change from buy-in to hold price in one color,\n        //change from hold price to current price in another color\n    }\n\n    mouseOut(){\n        //Reset / remove holdPrice\n        console.log(\"MouseOut\")\n        this.setState({pct: null})\n        this.setState({holdPrice: null})\n    }\n\n    click(){\n        //Place a limit order at the holdPrice\n        console.log(\"Clicked\")\n        this.mouseOver()\n        //this.setState({holdPrice: this.state.price})\n        //console.log(this.state.test)\n\n        \n        if (this.state.boughtAt != null){\n            //Already in a position -> Clicking exits\n            if (this.state.currPrice >= this.state.holdPrice){\n                this.setState({pctGain: 1+this.state.pct})\n                this.setState({soldAt: this.state.currPrice})\n                this.setState({boughtAt: null})\n            }\n            \n\n        }else{\n            //Not in a position -> Clicking enters\n            if (this.state.currPrice <= this.state.holdPrice){\n                this.setState({boughtAt: this.state.currPrice})\n            }\n        }\n\n\n    }\n\n    render(){\n        let preText\n        let buttonText\n        let overText\n\n        if (this.state.boughtAt != null){\n            preText = \"Buy At: \"\n        }else{\n            preText = \"Sell At: \"\n        }\n\n        if (this.state.currPrice != null){\n            overText = this.state.currPrice.toFixed(2)\n            buttonText = `${preText} ${this.state.currPrice.toFixed(2)}`\n        }\n\n        if (this.state.holdPrice != null){\n            buttonText = this.state.holdPrice.toFixed(2)\n        }\n\n\n        //Use this.state.pct in place of this.props.fakePCT for live testing\n        //First PCT bar shows gains, second is to show price changes\n        return(\n            <div>\n                <PCTBar maxWidth=\"270\" pctChange={this.state.pctGain - 1} scale=\"1\"/>\n                <div>`Bought at: ${this.state.boughtAt}`</div>\n                <div>`Sold at: ${this.state.soldAt}`</div>\n                <PCTBar maxWidth=\"270\" pctChange={this.state.pct} scale=\"1\"/>\n                <div>{overText}</div>\n                <div><button class=\"streamBtn\" onClick={this.click} onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>{buttonText}</button></div>\n            </div>)\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}