{"ast":null,"code":"//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n//Uses the Polygon websocket rather than the alpaca one. Documentation here:\n//https://polygon.io/sockets\n//TODO: This will need different methods depending on which websocket is being used, since they all seem to have different formats and standards\n//For now just use the stocks endpoint to build everything out\nclass Stream {\n  constructor(key_id, url, callback) {\n    //Stocks Websocket\n    this.ws = new WebSocket(url);\n    console.log(\"test\"); //Send Authentication Message On Open:\n    //TODO: Error handling on failure to authenticate        \n\n    this.ws.onopen = () => {\n      console.log(\"Authenticating\");\n      this.ws.send(JSON.stringify({\n        \"action\": \"auth\",\n        \"params\": key_id\n      }));\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"Disconnected\");\n    }; //TODO: Could I just use onmessage = callback(msg)?\n\n\n    this.ws.onmessage = msg => {\n      callback(msg);\n    };\n  } //TODO: These are only for the stock cluster; will need changes for forex / crypto\n  //TODO: Check if you can do this more than once, & how the response actually comes through\n\n\n  subscribe(ticker) {\n    alert(\"Subscribed\");\n    this.ws.send(JSON.stringify({\n      \"action\": \"subscribe\",\n      \"params\": \"T.\" + ticker\n    }));\n  }\n\n  unsubscribe(ticker) {\n    this.ws.send(JSON.stringify({\n      \"action\": \"unsubscribe\",\n      \"params\": \"T.\" + ticker\n    }));\n  }\n\n  disconnect() {\n    this.ws.close();\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["Stream","constructor","key_id","url","callback","ws","WebSocket","console","log","onopen","send","JSON","stringify","onclose","onmessage","msg","subscribe","ticker","alert","unsubscribe","disconnect","close"],"mappings":"AAAA;AACA;AAEA;AACA;AAGA;AACA;AAEA,MAAMA,MAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,MAAD,EAASC,GAAT,EAAcC,QAAd,EAAuB;AAC9B;AACA,SAAKC,EAAL,GAAU,IAAIC,SAAJ,CAAcH,GAAd,CAAV;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAH8B,CAK9B;AACA;;AACA,SAAKH,EAAL,CAAQI,MAAR,GAAiB,MAAM;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKH,EAAL,CAAQK,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAS,MAAV;AAAiB,kBAAUV;AAA3B,OAAf,CAAb;AACH,KAHD;;AAKA,SAAKG,EAAL,CAAQQ,OAAR,GAAkB,MAAK;AACnBN,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KAFD,CAZ8B,CAgB9B;;;AACA,SAAKH,EAAL,CAAQS,SAAR,GAAoBC,GAAG,IAAI;AACvBX,MAAAA,QAAQ,CAACW,GAAD,CAAR;AACH,KAFD;AAKH,GAvBO,CAyBR;AACA;;;AACAC,EAAAA,SAAS,CAACC,MAAD,EAAQ;AACbC,IAAAA,KAAK,CAAC,YAAD,CAAL;AACA,SAAKb,EAAL,CAAQK,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAe;AAAC,gBAAS,WAAV;AAAsB,gBAAS,OAAKK;AAApC,KAAf,CAAb;AACH;;AAEDE,EAAAA,WAAW,CAACF,MAAD,EAAQ;AACf,SAAKZ,EAAL,CAAQK,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAe;AAAC,gBAAS,aAAV;AAAwB,gBAAS,OAAKK;AAAtC,KAAf,CAAb;AACH;;AAEDG,EAAAA,UAAU,GAAE;AACR,SAAKf,EAAL,CAAQgB,KAAR;AACH;;AAtCO;;AAyCZ,eAAerB,MAAf","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\n//Uses the Polygon websocket rather than the alpaca one. Documentation here:\n//https://polygon.io/sockets\n\n\n//TODO: This will need different methods depending on which websocket is being used, since they all seem to have different formats and standards\n//For now just use the stocks endpoint to build everything out\n\nclass Stream{\n    constructor(key_id, url, callback){\n        //Stocks Websocket\n        this.ws = new WebSocket(url)\n        console.log(\"test\")\n\n        //Send Authentication Message On Open:\n        //TODO: Error handling on failure to authenticate        \n        this.ws.onopen = () => {\n            console.log(\"Authenticating\")\n            this.ws.send(JSON.stringify({\"action\":\"auth\",\"params\": key_id}))\n        }\n\n        this.ws.onclose = () =>{\n            console.log(\"Disconnected\")\n        }\n\n        //TODO: Could I just use onmessage = callback(msg)?\n        this.ws.onmessage = msg => {\n            callback(msg)\n        }\n\n\n    }\n\n    //TODO: These are only for the stock cluster; will need changes for forex / crypto\n    //TODO: Check if you can do this more than once, & how the response actually comes through\n    subscribe(ticker){\n        alert(\"Subscribed\")\n        this.ws.send(JSON.stringify({\"action\":\"subscribe\",\"params\":\"T.\"+ticker}))\n    }\n\n    unsubscribe(ticker){\n        this.ws.send(JSON.stringify({\"action\":\"unsubscribe\",\"params\":\"T.\"+ticker}))\n    }\n\n    disconnect(){\n        this.ws.close()\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}