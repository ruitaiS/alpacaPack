{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/pctBar.js\";\nimport { Component } from \"react\";\n\nclass PCTBar extends Component {\n  constructor(props) {\n    super(props); //pctChange\n    //maxWidth\n    //scale\n\n    this.styling = this.styling.bind(this);\n    this.bar = this.bar.bind(this);\n    this.square = this.square.bind(this);\n    this.subPlot = this.subPlot.bind(this);\n    this.state = {};\n  }\n\n  bar() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"68px\",\n        backgroundColor: \"green\",\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this);\n  }\n\n  square(color) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"5px\",\n        backgroundColor: {\n          color\n        },\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this);\n  }\n\n  subPlot(pctChange) {\n    let res = [];\n\n    for (let i = 0; i < pctChange - 0.1; i += 0.1) {\n      res.push(this.bar());\n    }\n\n    for (let j = pctChange % 0.1; j < pctChange; j += 0.01) {\n      res.push(this.square(\"yellow\"));\n    }\n\n    return res;\n  }\n\n  styling(pctChange) {\n    let barWidth = this.props.maxWidth * Math.abs(pctChange) * this.props.scale;\n\n    if (pctChange > 0) {\n      //Positive Change\n      //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.maxWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: this.subPlot(Math.abs(this.props.pctChange))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.styling(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PCTBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/pctBar.js"],"names":["Component","PCTBar","constructor","props","styling","bind","bar","square","subPlot","state","height","width","backgroundColor","margin","color","pctChange","res","i","push","j","barWidth","maxWidth","Math","abs","scale","transform","render","display"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //maxWidth\n        //scale\n        this.styling = this.styling.bind(this);\n        this.bar = this.bar.bind(this);\n        this.square = this.square.bind(this);\n        this.subPlot = this.subPlot.bind(this);\n        this.state = {\n        }\n    }\n\n    bar(){\n        return (<div style={{height: \"5px\", width: \"68px\", backgroundColor: \"green\", margin: \"1px\"}}></div>)\n    }\n\n    square(color){\n        return (<div style={{height: \"5px\", width: \"5px\", backgroundColor: {color}, margin: \"1px\"}}></div>)\n    }\n\n    subPlot(pctChange){\n        let res = []\n        for (let i = 0; i < pctChange - 0.1; i += 0.1){\n            res.push(this.bar())\n        }\n\n        for (let j = pctChange%0.1; j < pctChange; j += 0.01){\n            res.push(this.square(\"yellow\"))\n        }\n        return res\n    }\n\n    styling(pctChange){\n        let barWidth = this.props.maxWidth * Math.abs(pctChange) * this.props.scale\n\n        \n        if (pctChange > 0){\n            //Positive Change\n            //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div style={{display:\"flex\"}}>{this.subPlot(Math.abs(this.props.pctChange))}</div>\n                <div style={this.styling(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;"]},"metadata":{},"sourceType":"module"}