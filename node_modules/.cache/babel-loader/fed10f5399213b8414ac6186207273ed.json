{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/pctBar.js\";\nimport { Component } from \"react\";\n\nclass PCTBar extends Component {\n  constructor(props) {\n    super(props); //pctChange\n    //width\n    //height\n\n    this.mainStyle = this.mainStyle.bind(this);\n    this.bar = this.bar.bind(this);\n    this.square = this.square.bind(this);\n    this.subPlot = this.subPlot.bind(this);\n    this.subStyle = this.subStyle.bind(this);\n    this.state = {};\n  }\n\n  bar(color, key) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"68px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this);\n  }\n\n  square(color, key) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"5px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this);\n  }\n\n  subPlot(pct) {\n    let res = [];\n\n    if (pct > -0.01 && pct < 0.01 || pct == null) {\n      //Placeholder blank bar, otherwise it shifts up b/c missing element\n      res.push(this.bar(\"white\", `${this.props.symbol}${res.length}`));\n    } else {\n      //NOTE: This is still a little bit buggy when converting squares into bars\n      if (pct > 0) {\n        for (let i = 0; i <= pct - 0.1; i += 0.1) {\n          res.push(this.bar(\"green\", `${this.props.symbol}${res.length}`));\n        }\n\n        for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n          res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`));\n        }\n      } else {\n        pct = -pct;\n\n        for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n          res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`));\n        }\n\n        for (let i = 0; i <= pct - 0.1; i += 0.1) {\n          res.push(this.bar(\"red\", `${this.props.symbol}${res.length}`));\n        }\n      }\n    }\n\n    return res;\n  } //Styling for the subplot\n\n\n  subStyle(pct) {\n    if (pct < 0) {\n      let barWidth = Math.trunc(Math.abs(pct) * 100) * 7;\n      return {\n        display: \"flex\",\n        transform: `translate(${this.props.width / 2 - barWidth}px, 0px)`\n      };\n    } else {\n      return {\n        display: \"flex\",\n        transform: `translate(${this.props.width / 2}px, 0px)`\n      };\n    }\n  } //Styling for the Main Bar\n\n\n  mainStyle(pct) {\n    //Main Bar Represents Single Percentage\n    pct = pct % 0.01 * 100;\n    let barWidth = this.props.width / 2 * Math.abs(pct);\n\n    if (pct > 0) {\n      //Positive Change\n      //return{transform: `translate(${(this.props.width/2)}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.width / 2}px, 0px)`,\n        height: `${this.props.height}px`,\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${(this.props.width/2) - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        transform: `translate(${this.props.width / 2 - barWidth}px, 0px)`,\n        height: `${this.props.height}px`,\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    //NOTE: Setting the width of the encapsulating div has strange effects on centering\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.subStyle(this.props.pctChange),\n        children: this.subPlot(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.mainStyle(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PCTBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/pctBar.js"],"names":["Component","PCTBar","constructor","props","mainStyle","bind","bar","square","subPlot","subStyle","state","color","key","height","width","backgroundColor","margin","pct","res","push","symbol","length","i","j","barWidth","Math","trunc","abs","display","transform","render","pctChange"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //width\n        //height\n        this.mainStyle = this.mainStyle.bind(this);\n        this.bar = this.bar.bind(this);\n        this.square = this.square.bind(this);\n        this.subPlot = this.subPlot.bind(this);\n        this.subStyle = this.subStyle.bind(this);\n        this.state = {\n        }\n    }\n\n    bar(color, key){\n        return (<div key={key} style={{height: \"5px\", width: \"68px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    square(color, key){\n        return (<div key={key} style={{height: \"5px\", width: \"5px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    subPlot(pct){\n        let res = []\n\n        if (((pct > -0.01)&&(pct < 0.01))||(pct == null)){\n            //Placeholder blank bar, otherwise it shifts up b/c missing element\n            res.push(this.bar(\"white\", `${this.props.symbol}${res.length}`))\n        }else{\n            //NOTE: This is still a little bit buggy when converting squares into bars\n            if (pct > 0){\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"green\", `${this.props.symbol}${res.length}`))\n                }\n        \n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`))\n                }\n            }else{\n                pct = -pct\n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`))\n                }\n\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"red\", `${this.props.symbol}${res.length}`))\n                }\n            }            \n        }\n        return res\n    }\n\n    //Styling for the subplot\n    subStyle(pct){\n        if (pct < 0){\n            let barWidth = (Math.trunc(Math.abs(pct)*100))*7\n            return {display:\"flex\", transform: `translate(${(this.props.width/2)-barWidth}px, 0px)`}\n        }else{\n            return {display:\"flex\", transform: `translate(${(this.props.width/2)}px, 0px)`}\n        }\n\n    }\n\n    //Styling for the Main Bar\n    mainStyle(pct){\n        //Main Bar Represents Single Percentage\n        pct = (pct%0.01)*100\n\n        let barWidth = (this.props.width/2) * Math.abs(pct)\n        if (pct > 0){\n            //Positive Change\n            //return{transform: `translate(${(this.props.width/2)}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${(this.props.width/2)}px, 0px)`, height: `${this.props.height}px`, width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${(this.props.width/2) - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${(this.props.width/2) - barWidth}px, 0px)`, height: `${this.props.height}px`, width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n    }\n\n    render(){\n        //NOTE: Setting the width of the encapsulating div has strange effects on centering\n        return(\n            <div>\n                <div style={this.subStyle(this.props.pctChange)}>{this.subPlot(this.props.pctChange)}</div>\n                <div style={this.mainStyle(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;"]},"metadata":{},"sourceType":"module"}