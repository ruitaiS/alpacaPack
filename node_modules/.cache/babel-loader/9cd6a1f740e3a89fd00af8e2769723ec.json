{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/main.js\";\nimport { Component } from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n\n    this.tickerChange = this.tickerChange.bind(this);\n    this.idChange = this.idChange.bind(this);\n    this.skChange = this.skChange.bind(this);\n    this.connect = this.connect.bind(this);\n    this.streamListener = this.streamListener.bind(this);\n    this.log = this.log.bind(this);\n    this.test = this.test.bind(this);\n    this.state = {\n      key_id: 'PKHGR6CVRK7DTWFIB6Q1',\n      secret_key: 'TpSauKJD8We5hu3vvXzwp2o7UrXBfR4uzxp4Z27n',\n      ticker: 'TSLA'\n    }; //TODO: Stream will be a little more complex wrt getting the return data\n    //this.ws.subscribe(this.state.ticker)\n  } //#region Onchange Functions (Called from Control Panel)\n  //TODO: May need to update the websocket stream & also the api handler\n  //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n  //Need to directly use e.target.value\n\n\n  tickerChange(e) {\n    this.ws.unsubscribe(this.state.ticker);\n    this.setState({\n      ticker: e.target.value\n    });\n    this.ws.subscribe(e.target.value);\n  }\n\n  idChange(e) {\n    this.setState({\n      key_id: e.target.value\n    });\n    this.api.idChange(e.target.value);\n    this.ws = new Stream(e.target.value, this.streamListener);\n  }\n\n  skChange(e) {\n    this.setState({\n      secret_key: e.target.value\n    });\n    this.api.skChange(e.target.value);\n  }\n\n  connect() {\n    this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets');\n    this.ws = new Stream(this.state.key_id, this.streamListener);\n  }\n\n  disconnect() {//TODO\n  } //#endregion\n\n\n  log(msg) {\n    console.log(msg);\n  }\n\n  streamListener(msg) {\n    console.log(msg.data);\n    /*TODO\n    See old version of stream\n    Lots of entangled logic that you'll need to parcel out\n    Here specifically you'll just want to update the price\n    Updating chart and percent bar logic should be seperate\n    */\n\n    let data = JSON.parse(msg.data);\n    console.log(data[0].message);\n\n    if (data[0].message === '') {\n      console.log(\"Successfully authenticated\");\n    }\n  }\n\n  test() {//let ws = new Stream(this.state.key_id, this.streamListener)\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.key_id, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.test,\n        children: \" Clicky\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Control, {\n        key_id: this.state.key_id,\n        secret_key: this.state.secret_key,\n        ticker: this.state.ticker,\n        idChange: this.idChange,\n        skChange: this.skChange,\n        tickerChange: this.tickerChange,\n        connect: this.connect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/main.js"],"names":["Component","Control","API","Stream","Main","constructor","props","tickerChange","bind","idChange","skChange","connect","streamListener","log","test","state","key_id","secret_key","ticker","e","ws","unsubscribe","setState","target","value","subscribe","api","disconnect","msg","console","data","JSON","parse","message","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.connect = this.connect.bind(this);\n\n        this.streamListener = this.streamListener.bind(this);\n\n        this.log = this.log.bind(this);\n        this.test = this.test.bind(this);\n        this.state = {\n            key_id: 'PKHGR6CVRK7DTWFIB6Q1',\n            secret_key: 'TpSauKJD8We5hu3vvXzwp2o7UrXBfR4uzxp4Z27n',\n            ticker: 'TSLA',\n        }\n\n        //TODO: Stream will be a little more complex wrt getting the return data\n        //this.ws.subscribe(this.state.ticker)\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.ws.unsubscribe(this.state.ticker)\n        this.setState({ticker: e.target.value});\n        this.ws.subscribe(e.target.value)\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n        this.api.idChange(e.target.value)\n        this.ws = new Stream(e.target.value, this.streamListener)\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n        this.api.skChange(e.target.value)\n    }\n\n    connect(){\n        this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n        this.ws = new Stream(this.state.key_id, this.streamListener)\n    }\n\n    disconnect(){\n        //TODO\n    }\n    //#endregion\n\n    log(msg){\n        console.log(msg)\n    }\n\n    streamListener(msg){\n        console.log(msg.data)\n        /*TODO\n        See old version of stream\n        Lots of entangled logic that you'll need to parcel out\n        Here specifically you'll just want to update the price\n        Updating chart and percent bar logic should be seperate\n        */\n\n       let data = JSON.parse(msg.data)\n       console.log(data[0].message)\n\n        if (data[0].message === ''){\n            console.log(\"Successfully authenticated\")\n        }\n    }\n\n    test(){\n        //let ws = new Stream(this.state.key_id, this.streamListener)\n    }\n\n\n    render(){\n        return(\n            <div>\n                {this.state.key_id}\n                <button onClick={this.test}> Clicky</button>\n                <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} connect={this.connect}/>\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}