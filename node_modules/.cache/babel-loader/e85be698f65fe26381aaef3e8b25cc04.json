{"ast":null,"code":"class API {\n  constructor(key_id, secret_key, url) {\n    this.key_id = key_id;\n    this.secret_key = secret_key;\n    this.url = url;\n  } //https://alpaca.markets/docs/api-documentation/api-v2/account/\n\n\n  account(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/account`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  }\n\n  get_history(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/account/portfolio/history`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //Order Related Documentation & Functions\n  //Example of JSON order\n  //https://alpaca.markets/docs/trading-on-alpaca/orders/\n  //List of required parameters\n  //https://alpaca.markets/docs/api-documentation/api-v2/orders/\n\n\n  get_orders(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //For now just assume limit orders; implement the other types when you get the chance\n  //also do we really need the callback here?\n\n\n  buy(callback, ticker, qty, type, price, time_in_force) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('POST', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    let order = {\n      \"side\": \"buy\",\n      \"symbol\": {\n        ticker\n      },\n      \"qty\": {\n        qty\n      },\n      \"type\": {\n        type\n      },\n      \"limit_price\": {\n        price\n      },\n      \"time_in_force\": {\n        time_in_force\n      }\n    };\n    xhr.send(JSON.stringify(order));\n  }\n\n  sell(callback, ticker, qty, type, price, time_in_force) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('POST', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    let order = {\n      \"side\": \"sell\",\n      \"symbol\": ticker,\n      \"qty\": qty,\n      \"type\": type,\n      \"limit_price\": price,\n      \"time_in_force\": time_in_force\n    };\n    console.log(JSON.stringify(order));\n    /*\n    stop_price\n    trail_price\n    trail_percent\n    */\n\n    xhr.send(JSON.stringify(order));\n  } //This cancels all orders - see second link above for ways to cancel specific orders\n\n\n  cancel(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('DELETE', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //Position Related Documentation & Functions\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity\n\n\n  get_positions(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/positions`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //Get Position for a single ticker symbol\n\n\n  get_position(callback, ticker) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/positions/${ticker}`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //Functions for Updating Login Parameters\n  //These may be depreciated, since now we just create a new instance of API on connect\n\n\n  idChange(key_id) {\n    this.key_id = key_id;\n  }\n\n  skChange(secret_key) {\n    this.secret_key = secret_key;\n  }\n\n  urlChange(url) {\n    this.url = url;\n  }\n\n}\n\nexport default API;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/apiHandler.js"],"names":["API","constructor","key_id","secret_key","url","account","callback","xhr","XMLHttpRequest","addEventListener","responseText","open","setRequestHeader","send","get_history","get_orders","buy","ticker","qty","type","price","time_in_force","order","JSON","stringify","sell","console","log","cancel","get_positions","get_position","idChange","skChange","urlChange"],"mappings":"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","sourcesContent":["class API {\n  constructor(key_id, secret_key, url) {\n    this.key_id = key_id\n    this.secret_key = secret_key\n    this.url = url\n  }\n\n\n  //https://alpaca.markets/docs/api-documentation/api-v2/account/\n  account(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  get_history(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account/portfolio/history`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n    //Order Related Documentation & Functions\n\n    //Example of JSON order\n    //https://alpaca.markets/docs/trading-on-alpaca/orders/\n\n    //List of required parameters\n    //https://alpaca.markets/docs/api-documentation/api-v2/orders/\n\n\n\n  get_orders(callback){\n      let xhr = new XMLHttpRequest()\n      xhr.addEventListener('load', ()=>callback(xhr.responseText))\n      xhr.open('GET', `${this.url}/v2/orders`)\n      xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n      xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n      xhr.send()\n  }\n   \n  //For now just assume limit orders; implement the other types when you get the chance\n  //also do we really need the callback here?\n  buy(callback, ticker, qty, type, price, time_in_force){      \n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"buy\",\n      \"symbol\": {ticker},\n      \"qty\" : {qty},\n      \"type\": {type},\n      \"limit_price\": {price},\n      \"time_in_force\": {time_in_force}\n    }\n\n    xhr.send(JSON.stringify(order))\n  }\n  \n  sell(callback, ticker, qty, type, price, time_in_force){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"sell\",\n      \"symbol\": ticker,\n      \"qty\" : qty,\n      \"type\": type,\n      \"limit_price\": price,\n      \"time_in_force\": time_in_force\n    }\n\n    console.log(JSON.stringify(order))\n\n    /*\n    stop_price\n    trail_price\n    trail_percent\n    */\n\n    xhr.send(JSON.stringify(order))\n  }\n\n  //This cancels all orders - see second link above for ways to cancel specific orders\n  cancel(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('DELETE', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Position Related Documentation & Functions\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity\n  get_positions(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/positions`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Get Position for a single ticker symbol\n  get_position(callback, ticker){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/positions/${ticker}`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Functions for Updating Login Parameters\n  //These may be depreciated, since now we just create a new instance of API on connect\n  idChange(key_id){\n    this.key_id = key_id\n  }\n\n  skChange(secret_key){\n    this.secret_key = secret_key\n  }\n\n  urlChange(url){\n    this.url = url\n  }\n\n}\n\nexport default API;"]},"metadata":{},"sourceType":"module"}