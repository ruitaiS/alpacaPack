{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/main.js\";\nimport { Component } from \"react\";\nimport Draggable from 'react-draggable';\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\nimport List from './list';\nimport BumpStrat from './strats/bump';\nimport config from './config.json';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n\n    this.tickerChange = this.tickerChange.bind(this);\n    this.idChange = this.idChange.bind(this);\n    this.skChange = this.skChange.bind(this);\n    this.streamChange = this.streamChange.bind(this);\n    this.p1Change = this.p1Change.bind(this);\n    this.p2Change = this.p2Change.bind(this);\n    this.pairSwap = this.pairSwap.bind(this);\n    this.priceListener = this.priceListener.bind(this);\n    this.tradeStatusListener = this.tradeStatusListener.bind(this);\n    this.apiPositionListener = this.apiPositionListener.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.updatePositions = this.updatePositions.bind(this);\n    this.fhConnect = this.fhConnect.bind(this);\n    this.storeConfig = this.storeConfig.bind(this);\n    this.testClick = this.testClick.bind(this);\n    this.logPos = this.logPos.bind(this);\n    this.clearOrders = this.clearOrders.bind(this); //this.subscribe = this.subscribe.bind(this);\n    //this.unsubscribe = this.unsubscribe.bind(this);\n    //this.initPositions = this.initPositions.bind(this);\n    //this.get_price = this.get_price.bind(this);\n\n    this.positions = {}; // Symbol: [qty, price]\n\n    this.state = {\n      key_id: 'PKW3I9RKUMW268FBKY4H',\n      //key_id: 'bvqgf2n48v6qg460kck0',\n      secret_key: 'Bvctrlb0EdjfBiX12zWNoS0mwG9qd33V2kgRNusJ',\n      positions: null,\n      //array of [Ticker, qty, avg price] arrays\n      streamData: null,\n      //Data from the polygon stream\n      stream: 'stocks',\n      //stream: 'forex',\n      ticker: 'XPEV',\n      // Ticker is the active window ticker symbol\n      p1: \"USD\",\n      p2: \"CAD\",\n      connected: false,\n      test: true\n    };\n  } //#region Onchange Functions (Called from Control Panel)\n  //TODO: May need to update the websocket stream & also the api handler\n  //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n  //Need to directly use e.target.value\n\n\n  tickerChange(e) {\n    this.setState({\n      ticker: e.target.value\n    });\n  }\n\n  idChange(e) {\n    this.setState({\n      key_id: e.target.value\n    });\n  }\n\n  skChange(e) {\n    this.setState({\n      secret_key: e.target.value\n    });\n  }\n\n  streamChange(e) {\n    //TODO -> What should the behavior here be wrt to the currently active connections?\n    this.setState({\n      stream: e.target.value\n    }); //this.disconnect()\n    //url state is updated in connect()\n  } //Currency Pair Related Functions\n\n\n  p1Change(e) {\n    this.setState({\n      p1: e.target.value\n    });\n  }\n\n  p2Change(e) {\n    this.setState({\n      p2: e.target.value\n    });\n  }\n\n  pairSwap() {\n    let p1Now = this.state.p1;\n    let p2Now = this.state.p2;\n    this.setState({\n      p1: p2Now\n    });\n    this.setState({\n      p2: p1Now\n    });\n  } //#endregion\n  //TODO: This will most likely need to be re-done using the finnhub spec\n\n\n  priceListener(msg) {\n    //console.log(msg)\n    //console.log(JSON.parse(msg.data).data[0])\n    let data = JSON.parse(msg.data);\n\n    if (data.type === \"trade\") {\n      for (let datum of data.data) {\n        //console.log(`${datum.s} traded at ${datum.p} per share`)\n        this.positions[datum.s][\"value\"] = datum.p;\n      }\n    }\n\n    this.setState({\n      positions: this.positions\n    });\n  }\n\n  tradeStatusListener(msg) {\n    //Alpaca trade updates websocket Listener\n    //https://alpaca.markets/docs/api-documentation/api-v2/streaming/\n    //console.log(msg)\n    let data = JSON.parse(msg).data;\n\n    if (data.status != null) {\n      console.log(`main/tradeStatusListener: Alpaca says ${data.status}`);\n\n      if (data.status === \"authorized\") {\n        //Subscribe to trade status stream\n        this.ws.alpaca.send(JSON.stringify({\n          \"action\": \"listen\",\n          \"data\": {\n            \"streams\": [\"trade_updates\"]\n          }\n        }));\n      }\n    } else if (data.streams != null) {\n      data.streams.forEach(x => {\n        console.log(`main/tradeStatusListener: Alpaca is listening to ${x}`);\n      });\n    } else {\n      /*\n          Not 100% sure how to handle order updating in an efficient way.\n          RN I'm just keeping a list of pending orders, which get cleared as they are filled,\n          and a single entry for the previous fill order, so that child components can check it for updates\n           Could there maybe be a situation where the child isn't able to process the fill orders before it gets wiped?\n      */\n      //console.log(`Second branch Alpaca says ${msg}`)\n      //console.log(`Event Type: ${data.event} ${data.order.side}`)\n      //console.log(`Symbol: ${data.order.symbol}`)\n      if (data.event === 'new') {\n        console.log(`main/tradeStatusListener: New order created to ${data.order.side} at ${data.order.limit_price} per share, for ${data.order.qty} shares`);\n        this.positions[data.order.symbol][\"orders\"][data.order.id] = {\n          [data.order.side]: data.order.qty,\n          price: data.order.limit_price,\n          status: \"open\"\n        }; //this.positions[data.order.symbol][\"orders\"].push({[data.order.side]: data.order.qty, price: data.order.limit_price, id: data.order.id})\n      } else if (data.event === \"fill\") {\n        console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`); //update order status with fill price\n        //if sell, then check if we've liquidated\n\n        if (data.order.side === \"sell\" && this.positions[data.order.symbol].qty <= data.order.filled_qty) {\n          //alert(\"Sell filled\")\n          this.positions[data.order.symbol] = {\n            qty: 0,\n            entry_price: null,\n            exit_price: parseFloat(data.order.filled_avg_price),\n            value: null,\n            orders: {}\n          };\n        }\n\n        this.updatePositions(); //this.positions[data.order.symbol][\"orders\"][data.order.id] = {[data.order.side]: data.order.qty, price: data.order.limit_price, fill_price:data.order.filled_avg_price, status: \"closed\"}\n        //TODO: These two\n      } else if (data.event === \"partial_fill\") {\n        //This logic doesn't work properly afaik\n        console.log(\"main/tradeStatusListener: Partial Order Fill\");\n        this.updatePositions();\n        console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`);\n      } else if (data.event === \"canceled\") {\n        console.log(`main/tradeStatusListener: Order ${data.order.id} was canceled`);\n        this.positions[data.order.symbol] = {\n          qty: 0,\n          entry_price: null,\n          exit_price: null,\n          value: null,\n          orders: {}\n        };\n        this.updatePositions(); //Log the cancellation; don't delete outright\n        //Child components will listen for updates & update positions once they see them\n      } else {\n        //expired\n        //done_for_day\n        //replaced\n        //Or could be some other stuff\n        console.log(`main/tradeStatusListener: ${data.event}`);\n      }\n    }\n  }\n\n  apiPositionListener(msg) {\n    //alert(\"API position listener called\")\n    //Get Alpaca positions list\n    for (let position of JSON.parse(msg)) {\n      //Only subscribe to ws streams if not already subscribed\n      if (this.positions[position.symbol] == null) {\n        this.ws.subscribe(position.symbol);\n      } //Price defaults to last day price; will get overwritten by WS stream if live\n      //alert(`Quantity: ${position.qty}`)\n\n\n      this.positions[position.symbol] = {\n        qty: position.qty,\n        entry_price: parseFloat(position.avg_entry_price),\n        exit_price: null,\n        value: position.lastday_price,\n        orders: {}\n      };\n    }\n\n    this.setState({\n      positions: this.positions\n    });\n  } //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n\n\n  updatePositions() {\n    this.api.get_positions(this.apiPositionListener);\n  }\n\n  storeConfig() {\n    let res = \"data:application/octet-stream,\";\n    res += encodeURIComponent(JSON.stringify(config));\n    window.open(res);\n  }\n\n  fhConnect() {\n    //New for Feb 28\n    //Previously only done on polygon ws auth confirm\n    this.ws.subscribe(this.state.ticker);\n    this.updatePositions();\n    this.setState({\n      connected: true\n    });\n  }\n\n  connect() {\n    //Creates new connections to API and Stream\n    if (this.state.stream === \"stocks\") {\n      this.positions[`${this.state.ticker}`] = {\n        qty: 0,\n        entry_price: null,\n        exit_price: null,\n        value: null,\n        orders: {}\n      };\n      this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets');\n      this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://ws.finnhub.io?token=c0ui7on48v6r6g576j60', 'wss://paper-api.alpaca.markets/stream', this.priceListener, this.tradeStatusListener, this.fhConnect); //TODO: Update with existing orders. For now just log\n\n      this.api.get_orders(msg => console.log(`main/connect: Existing Orders: ${msg}`));\n    } else {\n      alert(\"Forex support coming soon!\");\n      this.setState({\n        stream: \"stocks\"\n      }); //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n      //this.api = null\n    }\n  }\n\n  disconnect() {\n    for (let symbol in this.positions) {\n      this.ws.unsubscribe(symbol);\n    }\n\n    this.ws.disconnect();\n    this.setState({\n      positions: null\n    });\n    this.setState({\n      connected: false\n    });\n  }\n\n  testClick() {\n    if (this.state.test) {\n      this.setState({\n        test: false\n      });\n      console.log(\"Set to false\");\n    } else {\n      this.setState({\n        test: true\n      });\n      console.log(\"Set to true\");\n    }\n  }\n\n  logPos() {\n    this.updatePositions();\n    console.log(JSON.stringify(this.state.positions));\n  }\n\n  clearOrders(symbol, orderID) {\n    if (orderID == null) {\n      this.positions[symbol][\"orders\"] = null;\n    } else {\n      delete this.positions[symbol][\"orders\"][orderID];\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: [/*#__PURE__*/_jsxDEV(Control, {\n          key_id: this.state.key_id,\n          secret_key: this.state.secret_key,\n          ticker: this.state.ticker,\n          stream: this.state.stream,\n          p1: this.state.p1,\n          p2: this.state.p2,\n          idChange: this.idChange,\n          skChange: this.skChange,\n          tickerChange: this.tickerChange,\n          streamChange: this.streamChange,\n          p1Change: this.p1Change,\n          p2Change: this.p2Change,\n          pairSwap: this.pairSwap,\n          connect: this.connect,\n          disconnect: this.disconnect,\n          connected: this.state.connected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), this.state.positions != null && /*#__PURE__*/_jsxDEV(BumpStrat, {\n          test: this.state.test,\n          api: this.api,\n          ticker: this.state.ticker,\n          value: this.state.positions[this.state.ticker][\"value\"],\n          positions: this.state.positions[this.state.ticker]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centeredRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.testClick,\n            children: \"Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.logPos,\n            children: \"Log Positions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/main.js"],"names":["Component","Draggable","Control","API","Stream","List","BumpStrat","config","Main","constructor","props","tickerChange","bind","idChange","skChange","streamChange","p1Change","p2Change","pairSwap","priceListener","tradeStatusListener","apiPositionListener","connect","disconnect","updatePositions","fhConnect","storeConfig","testClick","logPos","clearOrders","positions","state","key_id","secret_key","streamData","stream","ticker","p1","p2","connected","test","e","setState","target","value","p1Now","p2Now","msg","data","JSON","parse","type","datum","s","p","status","console","log","ws","alpaca","send","stringify","streams","forEach","x","event","order","side","limit_price","qty","symbol","id","price","filled_qty","filled_avg_price","entry_price","exit_price","parseFloat","orders","position","subscribe","avg_entry_price","lastday_price","api","get_positions","res","encodeURIComponent","window","open","get_orders","alert","unsubscribe","orderID","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport Draggable from 'react-draggable';\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nimport List from './list';\n\nimport BumpStrat from './strats/bump';\n\nimport config from './config.json'\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.streamChange = this.streamChange.bind(this);\n\n        this.p1Change = this.p1Change.bind(this);\n        this.p2Change = this.p2Change.bind(this);\n        this.pairSwap = this.pairSwap.bind(this);\n\n        this.priceListener = this.priceListener.bind(this);\n        this.tradeStatusListener = this.tradeStatusListener.bind(this);\n        this.apiPositionListener = this.apiPositionListener.bind(this);\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.updatePositions = this.updatePositions.bind(this);\n\n        this.fhConnect = this.fhConnect.bind(this);\n\n        this.storeConfig = this.storeConfig.bind(this);\n\n        this.testClick = this.testClick.bind(this);\n        this.logPos = this.logPos.bind(this);\n        this.clearOrders = this.clearOrders.bind(this);\n\n        //this.subscribe = this.subscribe.bind(this);\n        //this.unsubscribe = this.unsubscribe.bind(this);\n\n        //this.initPositions = this.initPositions.bind(this);\n        //this.get_price = this.get_price.bind(this);\n\n        this.positions = {} // Symbol: [qty, price]\n\n        this.state = {\n            key_id: 'PKW3I9RKUMW268FBKY4H',\n            //key_id: 'bvqgf2n48v6qg460kck0',\n            secret_key: 'Bvctrlb0EdjfBiX12zWNoS0mwG9qd33V2kgRNusJ',\n\n            \n            positions: null, //array of [Ticker, qty, avg price] arrays\n            streamData: null, //Data from the polygon stream\n\n            stream: 'stocks',\n            //stream: 'forex',\n            ticker: 'XPEV', // Ticker is the active window ticker symbol\n\n            p1: \"USD\",\n            p2: \"CAD\",\n\n            connected: false,\n\n            test: true,\n        }\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n    }\n\n    streamChange(e){\n        //TODO -> What should the behavior here be wrt to the currently active connections?\n        this.setState({stream: e.target.value})\n        //this.disconnect()\n\n        //url state is updated in connect()\n    }\n\n    //Currency Pair Related Functions\n    p1Change(e){\n        this.setState({p1: e.target.value})\n    }\n\n    p2Change(e){\n        this.setState({p2: e.target.value})\n    }\n\n    pairSwap(){\n        let p1Now = this.state.p1\n        let p2Now = this.state.p2\n        this.setState({p1: p2Now})\n        this.setState({p2: p1Now})\n    }\n    //#endregion\n\n    //TODO: This will most likely need to be re-done using the finnhub spec\n    priceListener(msg){\n        //console.log(msg)\n        //console.log(JSON.parse(msg.data).data[0])\n\n        let data = JSON.parse(msg.data)\n        if (data.type === \"trade\"){\n            for (let datum of data.data){\n                //console.log(`${datum.s} traded at ${datum.p} per share`)\n                this.positions[datum.s][\"value\"] = datum.p\n            }\n        }\n        this.setState({positions: this.positions})\n    }\n\n    tradeStatusListener(msg){ //Alpaca trade updates websocket Listener\n        //https://alpaca.markets/docs/api-documentation/api-v2/streaming/\n\n        //console.log(msg)\n        let data = JSON.parse(msg).data\n        if(data.status != null){\n            console.log(`main/tradeStatusListener: Alpaca says ${data.status}`)\n            if(data.status === \"authorized\"){\n                //Subscribe to trade status stream\n                this.ws.alpaca.send(JSON.stringify({\"action\":\"listen\",\"data\":{\"streams\":[\"trade_updates\"]}}))\n            }\n        }else if(data.streams != null){\n            data.streams.forEach(x => {console.log(`main/tradeStatusListener: Alpaca is listening to ${x}`)})\n        }else{\n\n            /*\n                Not 100% sure how to handle order updating in an efficient way.\n                RN I'm just keeping a list of pending orders, which get cleared as they are filled,\n                and a single entry for the previous fill order, so that child components can check it for updates\n\n                Could there maybe be a situation where the child isn't able to process the fill orders before it gets wiped?\n            */\n\n\n            //console.log(`Second branch Alpaca says ${msg}`)\n            //console.log(`Event Type: ${data.event} ${data.order.side}`)\n            //console.log(`Symbol: ${data.order.symbol}`)\n            \n            if(data.event === 'new'){\n                console.log(`main/tradeStatusListener: New order created to ${data.order.side} at ${data.order.limit_price} per share, for ${data.order.qty} shares`)\n                this.positions[data.order.symbol][\"orders\"][data.order.id] = {[data.order.side]: data.order.qty, price: data.order.limit_price, status: \"open\"}\n                //this.positions[data.order.symbol][\"orders\"].push({[data.order.side]: data.order.qty, price: data.order.limit_price, id: data.order.id})\n            }else if (data.event === \"fill\"){\n                console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n                //update order status with fill price\n                //if sell, then check if we've liquidated\n                if(data.order.side === \"sell\" && this.positions[data.order.symbol].qty <= data.order.filled_qty){\n                    //alert(\"Sell filled\")\n                    this.positions[data.order.symbol] = {qty: 0, entry_price: null, exit_price: parseFloat(data.order.filled_avg_price), value: null, orders: {}}\n                }\n\n                this.updatePositions()\n                //this.positions[data.order.symbol][\"orders\"][data.order.id] = {[data.order.side]: data.order.qty, price: data.order.limit_price, fill_price:data.order.filled_avg_price, status: \"closed\"}\n            \n            //TODO: These two\n            }else if(data.event === \"partial_fill\"){\n                //This logic doesn't work properly afaik\n                console.log(\"main/tradeStatusListener: Partial Order Fill\")\n                this.updatePositions()\n                console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n            }else if (data.event === \"canceled\"){\n                console.log(`main/tradeStatusListener: Order ${data.order.id} was canceled`)\n                this.positions[data.order.symbol] = {qty: 0, entry_price: null, exit_price: null, value: null, orders: {}}\n                this.updatePositions()\n                //Log the cancellation; don't delete outright\n                //Child components will listen for updates & update positions once they see them\n            }else{\n                //expired\n                //done_for_day\n                //replaced\n                //Or could be some other stuff\n                console.log(`main/tradeStatusListener: ${data.event}`)\n            }\n        }\n    }\n\n    \n    apiPositionListener(msg){\n        //alert(\"API position listener called\")\n\n        //Get Alpaca positions list\n        for (let position of JSON.parse(msg)){\n            //Only subscribe to ws streams if not already subscribed\n            if(this.positions[position.symbol] == null){\n                this.ws.subscribe(position.symbol)\n            }\n\n            //Price defaults to last day price; will get overwritten by WS stream if live\n            //alert(`Quantity: ${position.qty}`)\n            this.positions[position.symbol] = {qty: position.qty, entry_price: parseFloat(position.avg_entry_price), exit_price: null, value: position.lastday_price, orders: {}}\n        }\n\n        this.setState({positions: this.positions})\n    }\n\n    //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n    updatePositions(){\n        this.api.get_positions(this.apiPositionListener)\n    }\n\n    storeConfig(){\n        let res = \"data:application/octet-stream,\"\n        res += encodeURIComponent(JSON.stringify(config))\n        window.open(res);\n    }\n\n    fhConnect(){\n        //New for Feb 28\n        //Previously only done on polygon ws auth confirm\n        this.ws.subscribe(this.state.ticker)\n        this.updatePositions()\n        this.setState({connected: true})\n    }\n\n\n\n    connect(){\n        //Creates new connections to API and Stream\n        if (this.state.stream === \"stocks\"){\n            this.positions[`${this.state.ticker}`] = {qty: 0, entry_price: null, exit_price: null, value: null, orders: {}}\n            this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n            this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://ws.finnhub.io?token=c0ui7on48v6r6g576j60', 'wss://paper-api.alpaca.markets/stream', this.priceListener, this.tradeStatusListener, this.fhConnect)\n\n            //TODO: Update with existing orders. For now just log\n            this.api.get_orders((msg)=>console.log(`main/connect: Existing Orders: ${msg}`))\n        }else{\n            alert(\"Forex support coming soon!\")\n            this.setState({stream: \"stocks\"})\n            //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n            //this.api = null\n        }\n    }\n\n    disconnect(){\n        for (let symbol in this.positions){\n            this.ws.unsubscribe(symbol)\n        }\n        this.ws.disconnect()\n        this.setState({positions: null})\n        this.setState({connected: false})\n    }\n\n    testClick(){\n        if (this.state.test){\n            this.setState({test:false})\n            console.log(\"Set to false\")\n        }else{\n            this.setState({test:true})\n            console.log(\"Set to true\")\n        }\n    }\n\n    logPos(){\n        this.updatePositions()\n        console.log(JSON.stringify(this.state.positions))\n    }\n\n    clearOrders(symbol, orderID){\n        if (orderID == null){\n            this.positions[symbol][\"orders\"]= null\n        }else{\n            delete this.positions[symbol][\"orders\"][orderID]\n        }\n\n    }\n\n\n    render(){\n        return(\n            <div>\n                {/*\n                <List positions={this.state.positions} api={this.api} updatePositions={this.updatePositions}/>\n                <button onClick={this.storeConfig}>Save List</button>\n                */}\n\n                <div className=\"centered\">                \n                    <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} stream={this.state.stream} p1={this.state.p1} p2={this.state.p2} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} streamChange={this.streamChange} p1Change={this.p1Change} p2Change={this.p2Change} pairSwap={this.pairSwap} connect={this.connect} disconnect={this.disconnect} connected={this.state.connected}/>\n                    \n                    {/*Display Strat box only after price feed is live */}\n                    {this.state.positions != null &&\n                    <BumpStrat test={this.state.test} api={this.api} ticker={this.state.ticker} value={this.state.positions[this.state.ticker][\"value\"]} positions={this.state.positions[this.state.ticker]}/>\n                    }\n\n                    <div className=\"centeredRow\">\n                        {/*Test for updating props */}\n                        <button onClick={this.testClick}>Test</button>\n                        {/*Show Positions in Console */}\n                        <button onClick={this.logPos}>Log Positions</button>\n                    </div>\n            </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}