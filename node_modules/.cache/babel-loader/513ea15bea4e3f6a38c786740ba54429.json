{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/healthBar.js\";\nimport { Component } from \"react\";\n\nclass HealthBar extends Component {\n  constructor(props) {\n    super(props); //basePrice\n    //currPrice\n    //width\n\n    this.styling = this.styling.bind(this);\n    this.state = {}; // //Bind this to its functions\n    // this.click = this.click.bind(this)\n    // this.mouseOver = this.mouseOver.bind(this)\n    // this.mouseOut = this.mouseOut.bind(this)\n    // let health = 100\n    // let color = \"green\"\n    // let healthBarText = buttonText - this.state.price\n  }\n\n  bgColor(percentChange) {\n    if (percentChange < 0) {\n      return \"red\";\n    } else {\n      return \"green\";\n    }\n  }\n\n  styling(base, curr) {\n    let pctChange = (curr - base) / base;\n    let barWidth = this.props.maxWidth * Math.abs(pctChange);\n    console.log(`Percentage Change: ${pctChange}`);\n    console.log(`Bar Width: ${barWidth}`);\n\n    if (pctChange > 0) {\n      //Positive Change\n      //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.maxWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.props.basePrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.props.currPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.styling(this.props.basePrice, this.props.currPrice)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Percentage Change: \", 100 * (this.props.currPrice - this.props.basePrice) / this.props.basePrice, \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HealthBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/healthBar.js"],"names":["Component","HealthBar","constructor","props","styling","bind","state","bgColor","percentChange","base","curr","pctChange","barWidth","maxWidth","Math","abs","console","log","transform","height","width","backgroundColor","render","basePrice","currPrice"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAiC;AAC7BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;AACA;AACA;;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,KAAL,GAAa,EAAb,CANc,CASd;AACA;AACA;AACA;AAEA;AACA;AACA;AAEH;;AAEDC,EAAAA,OAAO,CAACC,aAAD,EAAe;AAClB,QAAIA,aAAa,GAAG,CAApB,EAAsB;AAClB,aAAO,KAAP;AACH,KAFD,MAEK;AACD,aAAO,OAAP;AACH;AACJ;;AAEDJ,EAAAA,OAAO,CAACK,IAAD,EAAOC,IAAP,EAAY;AACf,QAAIC,SAAS,GAAG,CAACD,IAAI,GAACD,IAAN,IAAcA,IAA9B;AACA,QAAIG,QAAQ,GAAG,KAAKT,KAAL,CAAWU,QAAX,GAAsBC,IAAI,CAACC,GAAL,CAASJ,SAAT,CAArC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBN,SAAU,EAA5C;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaL,QAAS,EAAnC;;AAEA,QAAID,SAAS,GAAG,CAAhB,EAAkB;AACd;AACA;AACA,aAAM;AAACO,QAAAA,SAAS,EAAG,aAAY,KAAKf,KAAL,CAAWU,QAAS,UAA7C;AAAwDM,QAAAA,MAAM,EAAE,MAAhE;AAAwEC,QAAAA,KAAK,EAAG,GAAER,QAAS,IAA3F;AAAgGS,QAAAA,eAAe,EAAE;AAAjH,OAAN;AACH,KAJD,MAIK;AACD;AACA;AACA,aAAM;AAACF,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,KAAK,EAAG,GAAER,QAAS,IAApC;AAAyCS,QAAAA,eAAe,EAAE;AAA1D,OAAN;AACH;AAIJ;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI;AAAA,kBAAM,KAAKnB,KAAL,CAAWoB;AAAjB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAM,KAAKpB,KAAL,CAAWqB;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,KAAK,EAAE,KAAKpB,OAAL,CAAa,KAAKD,KAAL,CAAWoB,SAAxB,EAAmC,KAAKpB,KAAL,CAAWqB,SAA9C;AAAZ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,0CAAyB,OAAK,KAAKrB,KAAL,CAAWqB,SAAX,GAAuB,KAAKrB,KAAL,CAAWoB,SAAvC,IAAkD,KAAKpB,KAAL,CAAWoB,SAAtF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA3D4B;;AA8DjC,eAAetB,SAAf","sourcesContent":["import {Component} from \"react\";\n\nclass HealthBar extends Component{\n    constructor(props){\n        super(props);\n        //basePrice\n        //currPrice\n        //width\n        this.styling = this.styling.bind(this);\n        this.state = {\n        }\n\n        // //Bind this to its functions\n        // this.click = this.click.bind(this)\n        // this.mouseOver = this.mouseOver.bind(this)\n        // this.mouseOut = this.mouseOut.bind(this)\n\n        // let health = 100\n        // let color = \"green\"\n        // let healthBarText = buttonText - this.state.price\n\n    }\n\n    bgColor(percentChange){\n        if (percentChange < 0){\n            return \"red\"\n        }else{\n            return \"green\"\n        }\n    }\n\n    styling(base, curr){\n        let pctChange = (curr-base) / base\n        let barWidth = this.props.maxWidth * Math.abs(pctChange)\n        console.log(`Percentage Change: ${pctChange}`)\n        console.log(`Bar Width: ${barWidth}`)\n\n        if (pctChange > 0){\n            //Positive Change\n            //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{height: \"50px\", width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n\n        \n        \n    }\n\n    render(){\n        return(\n            <div>\n                <div>{this.props.basePrice}</div>\n                <div>{this.props.currPrice}</div>\n                <div style={this.styling(this.props.basePrice, this.props.currPrice)}></div>\n                <div>Percentage Change: {100*(this.props.currPrice - this.props.basePrice)/this.props.basePrice} %</div>\n            </div>\n        )\n        \n    }\n}\n\nexport default HealthBar;"]},"metadata":{},"sourceType":"module"}