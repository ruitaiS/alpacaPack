{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/stream.js\";\n//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\nimport { Component } from \"react\";\nimport PCTBar from './pctBar';\n\nclass Stream extends Component {\n  constructor(props) {\n    super(props); //key_id\n    //secret_key\n    //ticker\n    //fakePCT\n\n    this.ws = new WebSocket('wss://socket.polygon.io/stocks');\n    this.state = {//currPrice\n      //pct\n    }; //Bind this to its functions\n\n    this.click = this.click.bind(this);\n    this.mouseOver = this.mouseOver.bind(this);\n    this.mouseOut = this.mouseOut.bind(this);\n  } //Stocks Websocket\n\n\n  //Forex Websocket\n  //ws = new WebSocket('wss://socket.polygon.io/forex')\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('connected');\n      let auth_data = {\n        \"action\": \"auth\",\n        \"params\": this.props.key_id\n      };\n      this.ws.send(JSON.stringify(auth_data));\n      let listen_message = {\n        \"action\": \"subscribe\",\n        \"params\": \"T.\" + this.props.ticker\n      };\n      this.ws.send(JSON.stringify(listen_message));\n    };\n\n    this.ws.onmessage = evt => {\n      let data = JSON.parse(evt.data); //console.log(data[0].p)\n\n      this.setState({\n        currPrice: data[0].p\n      }); //Inverted PCT\n      //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n      //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n\n      this.setState({\n        pct: (this.state.buyPrice - this.state.currPrice) / this.state.buyPrice\n      });\n      console.log(this.state.pct);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  mouseOver() {\n    //Store current stream price\n    //We want this to only run once, and then stop updating\n    console.log(\"Mouseover\");\n    this.setState({\n      buyPrice: this.state.currPrice\n    });\n  }\n\n  mouseOut() {\n    //Reset / remove buyPrice\n    console.log(\"MouseOut\");\n    this.setState({\n      buyPrice: null\n    });\n  }\n\n  click() {\n    //Place a limit order at the buyPrice\n    console.log(\"Clicked\");\n    this.mouseOver(); //this.setState({buyPrice: this.state.price})\n    //console.log(this.state.test)\n  }\n\n  render() {\n    let buttonText = this.state.currPrice;\n\n    if (this.state.buyPrice != null) {\n      buttonText = this.state.buyPrice;\n    } //Use this.state.pct in place of this.props.fakePCT for live testing\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PCTBar, {\n        maxWidth: \"270\",\n        pctChange: this.props.fakePCT,\n        scale: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.currPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"streamBtn\",\n          onClick: this.click,\n          onMouseOver: this.mouseOver,\n          onMouseOut: this.mouseOut,\n          children: buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["Component","PCTBar","Stream","constructor","props","ws","WebSocket","state","click","bind","mouseOver","mouseOut","componentDidMount","onopen","console","log","auth_data","key_id","send","JSON","stringify","listen_message","ticker","onmessage","evt","data","parse","setState","currPrice","p","pct","buyPrice","onclose","render","buttonText","fakePCT"],"mappings":"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","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\nimport {Component} from \"react\";\nimport PCTBar from './pctBar';\n\nclass Stream extends Component {\n    constructor(props){\n        super(props);\n        //key_id\n        //secret_key\n        //ticker\n        //fakePCT\n        this.state = {\n            //currPrice\n            //pct\n        }\n\n        //Bind this to its functions\n        this.click = this.click.bind(this)\n        this.mouseOver = this.mouseOver.bind(this)\n        this.mouseOut = this.mouseOut.bind(this)\n    }\n\n    //Stocks Websocket\n    ws = new WebSocket('wss://socket.polygon.io/stocks')\n\n    //Forex Websocket\n    //ws = new WebSocket('wss://socket.polygon.io/forex')\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n        console.log('connected')\n\n        let auth_data = {\"action\":\"auth\",\"params\": this.props.key_id}\n        this.ws.send(JSON.stringify(auth_data))\n\n        let listen_message = {\"action\":\"subscribe\",\"params\":\"T.\"+this.props.ticker}\n        this.ws.send(JSON.stringify(listen_message))\n\n\n        }\n\n        this.ws.onmessage = evt => {\n\n        let data = JSON.parse(evt.data)\n        //console.log(data[0].p)\n\n        this.setState({currPrice: data[0].p})\n\n        //Inverted PCT\n        //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n        //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n        this.setState({pct: (this.state.buyPrice-this.state.currPrice)/ this.state.buyPrice})\n        console.log(this.state.pct)\n\n        }\n\n        this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n\n    }\n\n    mouseOver(){\n        //Store current stream price\n        //We want this to only run once, and then stop updating\n        console.log(\"Mouseover\")\n        this.setState({buyPrice: this.state.currPrice})\n    }\n\n    mouseOut(){\n        //Reset / remove buyPrice\n        console.log(\"MouseOut\")\n        this.setState({buyPrice: null})\n    }\n\n    click(){\n        //Place a limit order at the buyPrice\n        console.log(\"Clicked\")\n        this.mouseOver()\n        //this.setState({buyPrice: this.state.price})\n        //console.log(this.state.test)\n\n\n    }\n\n    render(){\n        let buttonText = this.state.currPrice\n        if (this.state.buyPrice != null){\n            buttonText = this.state.buyPrice\n        }\n\n        //Use this.state.pct in place of this.props.fakePCT for live testing\n        return(\n            <div>\n                <PCTBar maxWidth=\"270\" pctChange={this.props.fakePCT} scale=\"1\"/>\n                <div>{this.state.currPrice}</div>\n                <div><button class=\"streamBtn\" onClick={this.click} onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>{buttonText}</button></div>\n            </div>)\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}