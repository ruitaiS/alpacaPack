{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/stream.js\";\n//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\nimport PCTBar from './pctBar';\nimport Chart from './chart';\nimport API from './apiHandler';\n\nclass Stream {\n  constructor(key_id, secret_key, ticker) {\n    //Stocks Websocket\n    this.ws = new WebSocket('wss://socket.polygon.io/stocks'); //Forex Websocket\n    //ws = new WebSocket('wss://socket.polygon.io/forex')\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('connected');\n      let auth_data = {\n        \"action\": \"auth\",\n        \"params\": this.props.key_id\n      };\n      this.ws.send(JSON.stringify(auth_data));\n      let listen_message = {\n        \"action\": \"subscribe\",\n        \"params\": \"T.\" + this.props.ticker\n      };\n      this.ws.send(JSON.stringify(listen_message));\n    };\n\n    this.ws.onmessage = evt => {\n      let data = JSON.parse(evt.data); //console.log(data[0])\n\n      this.setState({\n        currPrice: data[0].p\n      }); //Pass the Time, Price, Volume data to the chart\n\n      if (this.state.chartData.length >= 100) {\n        this.state.chartData.shift();\n      }\n\n      this.state.chartData.push(data[0]);\n\n      if (this.state.boughtAt != null) {\n        //Currently in a position\n        this.setState({\n          pct: (this.state.currPrice - this.state.boughtAt) / this.state.boughtAt\n        });\n      } else {\n        //Not in a position; only update pct if holding price\n        if (this.state.holdPrice != null) {\n          //Inverted PCT\n          //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n          //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n          this.setState({\n            pct: (this.state.holdPrice - this.state.currPrice) / this.state.holdPrice\n          });\n        }\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  mouseOver() {\n    //Store current stream price\n    //We want this to only run once, and then stop updating\n    console.log(\"Mouseover\");\n    this.setState({\n      holdPrice: this.state.currPrice\n    }); //TODO: If you're in a position, and you do mouseover\n    //Show the change from buy-in to hold price in one color,\n    //change from hold price to current price in another color\n  }\n\n  mouseOut() {\n    //Reset / remove holdPrice\n    console.log(\"MouseOut\");\n    this.setState({\n      pct: null\n    });\n    this.setState({\n      holdPrice: null\n    });\n  }\n\n  click() {\n    //Place a limit order at the holdPrice\n    console.log(\"Clicked\"); //this.setState({holdPrice: this.state.price})\n    //console.log(this.state.test)\n\n    if (this.state.boughtAt != null) {\n      //Already in a position -> Clicking exits\n      if (this.state.currPrice >= this.state.holdPrice) {\n        this.setState({\n          pctGain: (1 + this.state.pct) * this.state.pctGain\n        });\n        this.setState({\n          soldAt: this.state.currPrice\n        });\n        this.setState({\n          boughtAt: null\n        });\n      }\n    } else {\n      //Not in a position -> Clicking enters\n      if (this.state.currPrice <= this.state.holdPrice) {\n        this.setState({\n          soldAt: null\n        });\n        this.setState({\n          boughtAt: this.state.currPrice\n        });\n      }\n    }\n  }\n\n  render() {\n    let preText;\n    let buttonText;\n    let overText;\n\n    if (this.state.boughtAt != null) {\n      preText = \"Sell At: \";\n    } else {\n      preText = \"Buy At: \";\n    }\n\n    if (this.state.currPrice != null) {\n      overText = this.state.currPrice.toFixed(2);\n      buttonText = `${preText} ${this.state.currPrice.toFixed(2)}`;\n    }\n\n    if (this.state.holdPrice != null) {\n      buttonText = `${preText} ${this.state.holdPrice.toFixed(2)}`;\n    } //Use this.state.pct in place of this.props.fakePCT for live testing\n    //First PCT bar shows gains, second is to show price changes\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Chart, {\n        data: this.state.chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n        maxWidth: \"270\",\n        pctChange: this.state.pctGain - 1,\n        scale: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"`Bought at: $\", this.state.boughtAt, \"`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"`Sold at: $\", this.state.soldAt, \"`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"`Percent Gain: \", (this.state.pctGain - 1) * 100, \"%`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n        maxWidth: \"270\",\n        pctChange: this.state.pct,\n        scale: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: overText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(API, {\n        click: this.click,\n        mouseOver: this.mouseOver,\n        mouseOut: this.mouseOut,\n        buttonText: buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["PCTBar","Chart","API","Stream","constructor","key_id","secret_key","ticker","ws","WebSocket","componentDidMount","onopen","console","log","auth_data","props","send","JSON","stringify","listen_message","onmessage","evt","data","parse","setState","currPrice","p","state","chartData","length","shift","push","boughtAt","pct","holdPrice","onclose","mouseOver","mouseOut","click","pctGain","soldAt","render","preText","buttonText","overText","toFixed"],"mappings":"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","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\nimport PCTBar from './pctBar';\nimport Chart from './chart';\nimport API from './apiHandler';\n\nclass Stream{\n    constructor(key_id, secret_key, ticker){\n        //Stocks Websocket\n        this.ws = new WebSocket('wss://socket.polygon.io/stocks')\n\n        //Forex Websocket\n        //ws = new WebSocket('wss://socket.polygon.io/forex')\n    }\n\n\n\n\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n        console.log('connected')\n\n        let auth_data = {\"action\":\"auth\",\"params\": this.props.key_id}\n        this.ws.send(JSON.stringify(auth_data))\n\n        let listen_message = {\"action\":\"subscribe\",\"params\":\"T.\"+this.props.ticker}\n        this.ws.send(JSON.stringify(listen_message))\n\n\n        }\n\n        this.ws.onmessage = evt => {\n\n        let data = JSON.parse(evt.data)\n        //console.log(data[0])\n\n        this.setState({currPrice: data[0].p})\n\n        //Pass the Time, Price, Volume data to the chart\n        if (this.state.chartData.length >=100){\n            this.state.chartData.shift()\n        }\n        this.state.chartData.push(data[0])\n\n        if (this.state.boughtAt != null){ //Currently in a position\n            this.setState({pct: (this.state.currPrice - this.state.boughtAt)/ this.state.boughtAt})\n        }else{ //Not in a position; only update pct if holding price\n            if (this.state.holdPrice != null){\n                //Inverted PCT\n                //Buy Price > Current Price = Green; You can buy the stock at (or cheaper) than you wanted\n                //Buy Price < Current Price = Red; The stock is more expeensive than your limit price & the order won't go through (immediately)\n                this.setState({pct: (this.state.holdPrice-this.state.currPrice)/ this.state.holdPrice})\n            }\n        }\n\n\n\n        }\n\n        this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n\n    }\n\n    mouseOver(){\n        //Store current stream price\n        //We want this to only run once, and then stop updating\n        console.log(\"Mouseover\")\n        this.setState({holdPrice: this.state.currPrice})\n\n        //TODO: If you're in a position, and you do mouseover\n        //Show the change from buy-in to hold price in one color,\n        //change from hold price to current price in another color\n    }\n\n    mouseOut(){\n        //Reset / remove holdPrice\n        console.log(\"MouseOut\")\n        this.setState({pct: null})\n        this.setState({holdPrice: null})\n    }\n\n    click(){\n        //Place a limit order at the holdPrice\n        console.log(\"Clicked\")\n        //this.setState({holdPrice: this.state.price})\n        //console.log(this.state.test)\n\n        \n        if (this.state.boughtAt != null){\n            //Already in a position -> Clicking exits\n            if (this.state.currPrice >= this.state.holdPrice){\n                this.setState({pctGain: (1+this.state.pct)*this.state.pctGain})\n                this.setState({soldAt: this.state.currPrice})\n                this.setState({boughtAt: null})\n            }\n            \n        }else{\n            //Not in a position -> Clicking enters\n            if (this.state.currPrice <= this.state.holdPrice){\n                this.setState({soldAt: null})\n                this.setState({boughtAt: this.state.currPrice})\n            }\n        }\n\n\n    }\n\n    render(){\n        let preText\n        let buttonText\n        let overText\n\n        if (this.state.boughtAt != null){\n            preText = \"Sell At: \"\n        }else{\n            preText = \"Buy At: \"\n        }\n\n        if (this.state.currPrice != null){\n            overText = this.state.currPrice.toFixed(2)\n            buttonText = `${preText} ${this.state.currPrice.toFixed(2)}`\n        }\n\n        if (this.state.holdPrice != null){\n            buttonText = `${preText} ${this.state.holdPrice.toFixed(2)}`\n        }\n\n\n        //Use this.state.pct in place of this.props.fakePCT for live testing\n        //First PCT bar shows gains, second is to show price changes\n        return(\n            <div>\n                <Chart data={this.state.chartData}/>\n                <PCTBar maxWidth=\"270\" pctChange={this.state.pctGain - 1} scale=\"1\"/>\n                <div>`Bought at: ${this.state.boughtAt}`</div>\n                <div>`Sold at: ${this.state.soldAt}`</div>\n                <div>`Percent Gain: {(this.state.pctGain-1)*100}%`</div>\n                <PCTBar maxWidth=\"270\" pctChange={this.state.pct} scale=\"1\"/>\n                <div>{overText}</div>\n                {/*<div><button className=\"streamBtn\" onClick={this.click} onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>{buttonText}</button></div>*/}\n                <API click={this.click} mouseOver={this.mouseOver} mouseOut={this.mouseOut} buttonText={buttonText}/>\n            </div>)\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}