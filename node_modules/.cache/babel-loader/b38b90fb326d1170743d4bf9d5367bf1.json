{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/main.js\";\nimport { Component } from \"react\";\nimport Draggable from 'react-draggable';\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\nimport List from './list';\nimport BumpStrat from './strats/bump';\nimport config from './config.json';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n\n    this.tickerChange = this.tickerChange.bind(this);\n    this.idChange = this.idChange.bind(this);\n    this.skChange = this.skChange.bind(this);\n    this.streamChange = this.streamChange.bind(this);\n    this.p1Change = this.p1Change.bind(this);\n    this.p2Change = this.p2Change.bind(this);\n    this.pairSwap = this.pairSwap.bind(this);\n    this.priceListener = this.priceListener.bind(this);\n    this.tradeStatusListener = this.tradeStatusListener.bind(this);\n    this.apiPositionListener = this.apiPositionListener.bind(this);\n    this.connect = this.connect.bind(this);\n    this.updatePositions = this.updatePositions.bind(this);\n    this.storeConfig = this.storeConfig.bind(this); //this.subscribe = this.subscribe.bind(this);\n    //this.unsubscribe = this.unsubscribe.bind(this);\n    //this.initPositions = this.initPositions.bind(this);\n    //this.get_price = this.get_price.bind(this);\n\n    this.positions = {}; // Symbol: [qty, price]\n\n    this.state = {\n      key_id: 'PKE06IXOHYSCN0DKRU3M',\n      //key_id: 'bvqgf2n48v6qg460kck0',\n      secret_key: '1Hv5IIH4niKxwe6uvMSHzVyslejRSwhoiamYCSLQ',\n      positions: null,\n      //array of [Ticker, qty, avg price] arrays\n      streamData: null,\n      //Data from the polygon stream\n      stream: 'stocks',\n      //stream: 'forex',\n      ticker: 'MSFT',\n      // Ticker is the active window ticker symbol\n      p1: \"USD\",\n      p2: \"CAD\"\n    };\n  } //#region Onchange Functions (Called from Control Panel)\n  //TODO: May need to update the websocket stream & also the api handler\n  //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n  //Need to directly use e.target.value\n\n\n  tickerChange(e) {\n    this.setState({\n      ticker: e.target.value\n    });\n  }\n\n  idChange(e) {\n    this.setState({\n      key_id: e.target.value\n    });\n  }\n\n  skChange(e) {\n    this.setState({\n      secret_key: e.target.value\n    });\n  }\n\n  streamChange(e) {\n    //TODO -> What should the behavior here be wrt to the currently active connections?\n    this.setState({\n      stream: e.target.value\n    }); //this.disconnect()\n    //url state is updated in connect()\n  } //Currency Pair Related Functions\n\n\n  p1Change(e) {\n    this.setState({\n      p1: e.target.value\n    });\n  }\n\n  p2Change(e) {\n    this.setState({\n      p2: e.target.value\n    });\n  }\n\n  pairSwap() {\n    let p1Now = this.state.p1;\n    let p2Now = this.state.p2;\n    this.setState({\n      p1: p2Now\n    });\n    this.setState({\n      p2: p1Now\n    });\n  } //#endregion\n\n\n  priceListener(msg) {\n    //Polygon websocket callback; parses incoming data and updates state\n    //console.log(msg)\n    let data = JSON.parse(msg.data);\n\n    if (data[0].message != null) {\n      console.log(`Polygon says ${data[0].message}`); //initialize positions after authentication confirmation\n\n      if (data[0].message === 'authenticated') {\n        //TODO: How to handle the active window?\n        //this.ws.subscribe(this.state.ticker)\n        //Get Position List After Websocket Confirm\n        //alert(\"Getting Positions\")\n        this.updatePositions();\n      }\n    } else {\n      //Message is null, so we assume we're subscribed, and getting price data\n      //console.log(JSON.stringify(data))\n      //this.setState({streamData: data})\n      //Data from WS comes in Asynchronously, so we update the position dict\n      for (let datum of data) {\n        this.positions[datum.sym][\"price\"] = datum.p;\n      } //alert(\"Setting Positions\")\n\n\n      this.setState({\n        positions: this.positions\n      });\n    }\n  }\n\n  tradeStatusListener(msg) {\n    //Alpaca trade updates websocket Listener\n    //console.log(msg)\n    let data = JSON.parse(msg).data;\n\n    if (data.status != null) {\n      console.log(`Alpaca says ${data.status}`);\n\n      if (data.status === \"authorized\") {\n        //Subscribe to trade status stream\n        this.ws.alpaca.send(JSON.stringify({\n          \"action\": \"listen\",\n          \"data\": {\n            \"streams\": [\"trade_updates\"]\n          }\n        }));\n      }\n    } else if (data.streams != null) {\n      data.streams.forEach(x => {\n        console.log(`Alpaca is listening to ${x}`);\n      });\n    } else {\n      /*\n      console.log(`Second branch Alpaca says ${msg}`)\n      console.log(`Event Type: ${data.event}`)\n      console.log(`Symbol: ${data.order.symbol}`)\n      if(data.event === 'new'){\n          console.log(`New order created at ${data.order.limit_price} per share, for ${data.order.qty} shares`)\n      }else{\n          console.log(`${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n      }*/\n    }\n  }\n\n  apiPositionListener(msg) {\n    //alert(\"API position listener called\")\n    //Get Alpaca positions list\n    for (let position of JSON.parse(msg)) {\n      //Only subscribe to ws streams if not already subscribed\n      if (this.positions[position.symbol] == null) {\n        this.ws.subscribe(position.symbol);\n      } //Price defaults to last day price; will get overwritten by WS stream if live\n      //alert(`Quantity: ${position.qty}`)\n\n\n      this.positions[position.symbol] = {\n        qty: position.qty,\n        cost: position.avg_entry_price,\n        price: position.lastday_price\n      };\n    }\n\n    this.setState({\n      positions: this.positions\n    });\n  } //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n\n\n  updatePositions() {\n    this.api.get_positions(this.apiPositionListener);\n  }\n\n  storeConfig() {\n    let res = \"data:application/octet-stream,\";\n    res += encodeURIComponent(JSON.stringify(config));\n    window.open(res);\n  }\n\n  connect() {\n    //Creates new connections to API and Stream\n    if (this.state.stream === \"stocks\") {\n      this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets');\n      this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://socket.polygon.io/stocks', 'wss://paper-api.alpaca.markets/stream', this.priceListener, this.tradeStatusListener);\n    } else {\n      alert(\"Forex support coming soon!\");\n      this.setState({\n        stream: \"stocks\"\n      }); //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n      //this.api = null\n    }\n  }\n\n  disconnect() {//TODO\n    //this.ws.disconnect()\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        key_id: this.state.key_id,\n        secret_key: this.state.secret_key,\n        ticker: this.state.ticker,\n        stream: this.state.stream,\n        p1: this.state.p1,\n        p2: this.state.p2,\n        idChange: this.idChange,\n        skChange: this.skChange,\n        tickerChange: this.tickerChange,\n        streamChange: this.streamChange,\n        p1Change: this.p1Change,\n        p2Change: this.p2Change,\n        pairSwap: this.pairSwap,\n        connect: this.connect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FlipStrat, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/main.js"],"names":["Component","Draggable","Control","API","Stream","List","BumpStrat","config","Main","constructor","props","tickerChange","bind","idChange","skChange","streamChange","p1Change","p2Change","pairSwap","priceListener","tradeStatusListener","apiPositionListener","connect","updatePositions","storeConfig","positions","state","key_id","secret_key","streamData","stream","ticker","p1","p2","e","setState","target","value","p1Now","p2Now","msg","data","JSON","parse","message","console","log","datum","sym","p","status","ws","alpaca","send","stringify","streams","forEach","x","position","symbol","subscribe","qty","cost","avg_entry_price","price","lastday_price","api","get_positions","res","encodeURIComponent","window","open","alert","disconnect","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport Draggable from 'react-draggable';\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nimport List from './list';\n\nimport BumpStrat from './strats/bump';\n\nimport config from './config.json'\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.streamChange = this.streamChange.bind(this);\n\n        this.p1Change = this.p1Change.bind(this);\n        this.p2Change = this.p2Change.bind(this);\n        this.pairSwap = this.pairSwap.bind(this);\n\n        this.priceListener = this.priceListener.bind(this);\n        this.tradeStatusListener = this.tradeStatusListener.bind(this);\n        this.apiPositionListener = this.apiPositionListener.bind(this);\n        this.connect = this.connect.bind(this);\n        this.updatePositions = this.updatePositions.bind(this);\n\n        this.storeConfig = this.storeConfig.bind(this);\n\n        //this.subscribe = this.subscribe.bind(this);\n        //this.unsubscribe = this.unsubscribe.bind(this);\n\n        //this.initPositions = this.initPositions.bind(this);\n        //this.get_price = this.get_price.bind(this);\n\n        this.positions = {} // Symbol: [qty, price]\n\n        this.state = {\n            key_id: 'PKE06IXOHYSCN0DKRU3M',\n            //key_id: 'bvqgf2n48v6qg460kck0',\n            secret_key: '1Hv5IIH4niKxwe6uvMSHzVyslejRSwhoiamYCSLQ',\n\n            \n            positions: null, //array of [Ticker, qty, avg price] arrays\n            streamData: null, //Data from the polygon stream\n\n            stream: 'stocks',\n            //stream: 'forex',\n            ticker: 'MSFT', // Ticker is the active window ticker symbol\n\n            p1: \"USD\",\n            p2: \"CAD\",\n        }\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n    }\n\n    streamChange(e){\n        //TODO -> What should the behavior here be wrt to the currently active connections?\n        this.setState({stream: e.target.value})\n        //this.disconnect()\n\n        //url state is updated in connect()\n    }\n\n    //Currency Pair Related Functions\n    p1Change(e){\n        this.setState({p1: e.target.value})\n    }\n\n    p2Change(e){\n        this.setState({p2: e.target.value})\n    }\n\n    pairSwap(){\n        let p1Now = this.state.p1\n        let p2Now = this.state.p2\n        this.setState({p1: p2Now})\n        this.setState({p2: p1Now})\n    }\n    //#endregion\n\n    \n    priceListener(msg){ //Polygon websocket callback; parses incoming data and updates state\n        //console.log(msg)\n        let data = JSON.parse(msg.data)\n        if (data[0].message != null){\n            console.log(`Polygon says ${data[0].message}`)\n            //initialize positions after authentication confirmation\n            if (data[0].message === 'authenticated'){\n                //TODO: How to handle the active window?\n                //this.ws.subscribe(this.state.ticker)\n\n                //Get Position List After Websocket Confirm\n                //alert(\"Getting Positions\")\n                this.updatePositions()\n            }\n        }else{//Message is null, so we assume we're subscribed, and getting price data\n            //console.log(JSON.stringify(data))\n            //this.setState({streamData: data})\n\n            //Data from WS comes in Asynchronously, so we update the position dict\n            for (let datum of data){\n                this.positions[datum.sym][\"price\"] = datum.p\n            }\n            //alert(\"Setting Positions\")\n            this.setState({positions: this.positions})\n        }\n    }\n\n    tradeStatusListener(msg){ //Alpaca trade updates websocket Listener\n\n        //console.log(msg)\n        let data = JSON.parse(msg).data\n        if(data.status != null){\n            console.log(`Alpaca says ${data.status}`)\n            if(data.status === \"authorized\"){\n                //Subscribe to trade status stream\n                this.ws.alpaca.send(JSON.stringify({\"action\":\"listen\",\"data\":{\"streams\":[\"trade_updates\"]}}))\n            }\n        }else if(data.streams != null){\n            data.streams.forEach(x => {console.log(`Alpaca is listening to ${x}`)})\n        }else{\n            \n            /*\n            console.log(`Second branch Alpaca says ${msg}`)\n            console.log(`Event Type: ${data.event}`)\n            console.log(`Symbol: ${data.order.symbol}`)\n            if(data.event === 'new'){\n                console.log(`New order created at ${data.order.limit_price} per share, for ${data.order.qty} shares`)\n            }else{\n                console.log(`${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n            }*/           \n        }\n    }\n\n    \n    apiPositionListener(msg){\n        //alert(\"API position listener called\")\n\n        //Get Alpaca positions list\n        for (let position of JSON.parse(msg)){\n            //Only subscribe to ws streams if not already subscribed\n            if(this.positions[position.symbol] == null){\n                this.ws.subscribe(position.symbol)\n            }\n\n            //Price defaults to last day price; will get overwritten by WS stream if live\n            //alert(`Quantity: ${position.qty}`)\n            this.positions[position.symbol] = {qty: position.qty, cost: position.avg_entry_price, price: position.lastday_price}\n        }\n\n        this.setState({positions: this.positions})\n    }\n\n    //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n    updatePositions(){\n        this.api.get_positions(this.apiPositionListener)\n    }\n\n    storeConfig(){\n        let res = \"data:application/octet-stream,\"\n        res += encodeURIComponent(JSON.stringify(config))\n        window.open(res);\n    }\n\n\n\n    connect(){\n        //Creates new connections to API and Stream\n        if (this.state.stream === \"stocks\"){\n            this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n            this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://socket.polygon.io/stocks', 'wss://paper-api.alpaca.markets/stream', this.priceListener, this.tradeStatusListener)\n        }else{\n            alert(\"Forex support coming soon!\")\n            this.setState({stream: \"stocks\"})\n            //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n            //this.api = null\n        }\n    }\n\n    disconnect(){\n        //TODO\n        //this.ws.disconnect()\n\n    }\n\n\n    render(){\n        return(\n            <div className=\"centered\">\n                \n                {/* \n                <List positions={this.state.positions} api={this.api} updatePositions={this.updatePositions}/>\n                <button onClick={this.storeConfig}>Save List</button>\n                */}\n                <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} stream={this.state.stream} p1={this.state.p1} p2={this.state.p2} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} streamChange={this.streamChange} p1Change={this.p1Change} p2Change={this.p2Change} pairSwap={this.pairSwap} connect={this.connect}/>\n                <FlipStrat/>\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}