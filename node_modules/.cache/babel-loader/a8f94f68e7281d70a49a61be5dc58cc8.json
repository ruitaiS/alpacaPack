{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/kbHandler.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useKeyPress from \"./use-key-press\";\nimport useMultiKeyPress from \"./use-multi-key-press\"; //import \"./styles.css\";\n\nfunction areKeysPressed(keys = [], keysPressed = []) {\n  const required = new Set(keys);\n\n  for (var elem of keysPressed) {\n    required.delete(elem);\n  }\n\n  return required.size === 0;\n}\n\nconst MultiKeysPressed = ({\n  keys,\n  keysPressed,\n  emoji\n}) => {\n  const arePressed = areKeysPressed(keys, keysPressed);\n\n  if (arePressed) {\n    return emoji;\n  }\n\n  return null;\n};\n\n_c = MultiKeysPressed;\n\nfunction KB() {\n  _s();\n\n  // Call our hook for each key that we'd like to monitor\n  const happyPress = useKeyPress(\"h\");\n  const sadPress = useKeyPress(\"s\");\n  const robotPress = useKeyPress(\"r\");\n  const foxPress = useKeyPress(\"f\");\n  const keysPressed = useMultiKeyPress();\n  const hsrfPressed = areKeysPressed([\"s\", \"d\", \"h\", \"j\"], keysPressed);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      value: \"h\",\n      isBold: happyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      value: \"s\",\n      isBold: sadPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      value: \"r\",\n      isBold: robotPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      value: \"f\",\n      isBold: foxPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      value: \"s+d+h+j\",\n      isBold: hsrfPressed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"200px\",\n        width: \"100%\",\n        minHeight: \"240px\",\n        backgroundColor: \"#e6f5f8\"\n      },\n      children: [happyPress && \"😊\", sadPress && \"😢\", robotPress && \"🤖\", foxPress && \"🦊\", /*#__PURE__*/_jsxDEV(MultiKeysPressed, {\n        keys: [\"s\", \"d\", \"h\", \"j\"],\n        keysPressed: keysPressed,\n        emoji: \"\\uD83D\\uDC4C\\uD83C\\uDFFB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(KB, \"XbdMzWITUjfaim5sRw7K/vbtzYA=\", false, function () {\n  return [useKeyPress, useKeyPress, useKeyPress, useKeyPress, useMultiKeyPress];\n});\n\n_c2 = KB;\n\nconst Label = ({\n  value,\n  isBold\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    display: \"inline-block\",\n    margin: \"15px\",\n    fontSize: \"42px\",\n    fontWeight: isBold ? \"bold\" : \"normal\"\n  },\n  children: value\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 3\n}, this);\n\n_c3 = Label;\nexport default KB;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MultiKeysPressed\");\n$RefreshReg$(_c2, \"KB\");\n$RefreshReg$(_c3, \"Label\");","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/kbHandler.js"],"names":["React","ReactDOM","useKeyPress","useMultiKeyPress","areKeysPressed","keys","keysPressed","required","Set","elem","delete","size","MultiKeysPressed","emoji","arePressed","KB","happyPress","sadPress","robotPress","foxPress","hsrfPressed","padding","textAlign","fontSize","width","minHeight","backgroundColor","Label","value","isBold","display","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useKeyPress from \"./use-key-press\";\nimport useMultiKeyPress from \"./use-multi-key-press\";\n//import \"./styles.css\";\n\nfunction areKeysPressed(keys = [], keysPressed = []) {\n  const required = new Set(keys);\n  for (var elem of keysPressed) {\n    required.delete(elem);\n  }\n  return required.size === 0;\n}\n\nconst MultiKeysPressed = ({ keys, keysPressed, emoji }) => {\n  const arePressed = areKeysPressed(keys, keysPressed);\n\n  if (arePressed) {\n    return emoji;\n  }\n  return null;\n};\n\nfunction KB() {\n  // Call our hook for each key that we'd like to monitor\n  const happyPress = useKeyPress(\"h\");\n  const sadPress = useKeyPress(\"s\");\n  const robotPress = useKeyPress(\"r\");\n  const foxPress = useKeyPress(\"f\");\n  const keysPressed = useMultiKeyPress();\n  const hsrfPressed = areKeysPressed([\"s\", \"d\", \"h\", \"j\"], keysPressed);\n\n  return (\n    <div style={{ padding: \"20px\", textAlign: \"center\" }}>\n      <Label value=\"h\" isBold={happyPress} />\n      <Label value=\"s\" isBold={sadPress} />\n      <Label value=\"r\" isBold={robotPress} />\n      <Label value=\"f\" isBold={foxPress} />\n      <Label value=\"s+d+h+j\" isBold={hsrfPressed} />\n\n      <div\n        style={{\n          fontSize: \"200px\",\n          width: \"100%\",\n          minHeight: \"240px\",\n          backgroundColor: \"#e6f5f8\"\n        }}\n      >\n        {happyPress && \"😊\"}\n        {sadPress && \"😢\"}\n        {robotPress && \"🤖\"}\n        {foxPress && \"🦊\"}\n        <MultiKeysPressed\n          keys={[\"s\", \"d\", \"h\", \"j\"]}\n          keysPressed={keysPressed}\n          emoji=\"👌🏻\"\n        />\n      </div>\n    </div>\n  );\n}\n\nconst Label = ({ value, isBold }) => (\n  <div\n    style={{\n      display: \"inline-block\",\n      margin: \"15px\",\n      fontSize: \"42px\",\n      fontWeight: isBold ? \"bold\" : \"normal\"\n    }}\n  >\n    {value}\n  </div>\n);\n\nexport default KB;\n"]},"metadata":{},"sourceType":"module"}