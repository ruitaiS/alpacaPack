{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/strats/bump.js\";\nimport { Component } from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar'; //Automatically place limit sell at buy price + delta\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n//Use all available capital to purchase at that price\n//Shares = capital / price\n//Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n//Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n//Place limit order to liquidate\n//limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n//Considerations:\n//Track session percent gains\n//Changing capital allocation should reset session gain tracking\n//Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\nclass BumpStrat extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n    //api - alpaca trade api\n    //symbol - symbol that we're trading on\n    //price - current price of the asset\n    //Functions that need to get bound to this instance\n\n    this.deltaChange = this.deltaChange.bind(this);\n    this.click = this.click.bind(this);\n    this.state = {\n      startCapital: 500,\n      delta: 0.01,\n      status: \"out\" //out, in, waiting-entry, waiting-exit\n\n    };\n  }\n\n  function() {\n    console.log(\"Hi! :)\");\n  }\n\n  deltaChange(e) {\n    this.setState({\n      delta: e.target.value\n    });\n    console.log(`New Delta: ${this.state.delta}`);\n  }\n\n  capChange(e) {\n    this.setState({\n      startCapital: e.target.value\n    });\n    console.log(`New Starting Allocation: ${this.state.startCapital}`); //Reset the statistics too\n  }\n\n  entryConfirm() {//immediately place limit sell @ delta above\n  }\n\n  click(price) {\n    alert(`${price}`);\n\n    if (this.state.status === \"out\") {//Place a limit buy order\n      //On completion, place limit sell @ delta\n    } else if (this.state.status === \"in\") {//Place limit sell\n    } else if (this.state.status === \"waiting-entry\") {//Cancel existing buy order\n    } else if (this.state.status === \"waiting-exit\") {//Cancel sell order\n      //\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Bump Strat\", /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"inputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: `Current Price: $${this.props.price}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n          pctChange: \"0.1\",\n          width: \"500\",\n          height: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: [\"Initial Allocation: $\", this.state.startCapital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), this.state.status === \"out\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.startCapital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.startCapital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: [\"Delta: $\", this.state.delta]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            step: 0.01,\n            value: this.state.delta,\n            className: \"slider\",\n            id: \"slider\",\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.delta,\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PriceBtn, {\n          text: this.state.status,\n          click: this.click,\n          price: this.props.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BumpStrat;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/strats/bump.js"],"names":["Component","PriceBtn","PCTBar","BumpStrat","constructor","props","deltaChange","bind","click","state","startCapital","delta","status","function","console","log","e","setState","target","value","capChange","entryConfirm","price","alert","render","float","width","textAlign"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar';\n\n//Automatically place limit sell at buy price + delta\n\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n    //Use all available capital to purchase at that price\n    //Shares = capital / price\n    //Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n    //Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n    //Place limit order to liquidate\n    //limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n\n//Considerations:\n//Track session percent gains\n    //Changing capital allocation should reset session gain tracking\n    //Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\n\n\nclass BumpStrat extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n        //api - alpaca trade api\n        //symbol - symbol that we're trading on\n        //price - current price of the asset\n        \n\n        //Functions that need to get bound to this instance\n        this.deltaChange = this.deltaChange.bind(this);\n        this.click = this.click.bind(this);\n        this.state = {\n            startCapital: 500,\n            delta: 0.01,\n\n            status: \"out\", //out, in, waiting-entry, waiting-exit\n        }\n    }\n\n    function(){\n        console.log(\"Hi! :)\")\n    }\n\n    deltaChange(e){\n        this.setState({delta: e.target.value})\n        console.log(`New Delta: ${this.state.delta}`)\n    }\n\n    capChange(e){\n        this.setState({startCapital: e.target.value})\n        console.log(`New Starting Allocation: ${this.state.startCapital}`)\n        //Reset the statistics too\n    }\n\n    entryConfirm(){\n        //immediately place limit sell @ delta above\n    }\n\n    click(price){\n        alert(`${price}`)\n        if (this.state.status === \"out\"){\n            //Place a limit buy order\n            //On completion, place limit sell @ delta\n            \n        }else if (this.state.status === \"in\"){\n            //Place limit sell\n\n        }else if (this.state.status === \"waiting-entry\"){\n            //Cancel existing buy order\n\n        }else if (this.state.status === \"waiting-exit\"){\n            //Cancel sell order\n            //\n\n        }\n    }\n\n    render(){  \n\n\n\n        return(\n            <div>\n                Bump Strat\n                <fieldset className=\"inputBox\">\n                    <legend>{`Current Price: $${this.props.price}`}</legend>\n                    <PCTBar pctChange=\"0.1\" width=\"500\" height=\"50\"/>\n\n                    <div>\n                        <label htmlFor=\"slider\">Initial Allocation: ${this.state.startCapital}</label>\n                        {/*Conditionally disable if we're in a position */}\n                        {this.state.status === \"out\" ? \n                            <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.startCapital} onChange={this.capChange}/>\n                            :\n                            <input disabled style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.startCapital} onChange={this.capChange}/>\n                        }\n                    </div>\n\n                    <div>\n                        <label htmlFor=\"slider\">Delta: ${this.state.delta}</label>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} type=\"range\" min=\"0\" max=\"10\" step={0.01} value={this.state.delta} className=\"slider\" id=\"slider\" onChange={this.deltaChange}/>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.delta} onChange={this.deltaChange}/>\n                    </div>\n\n                    <PriceBtn text={this.state.status} click={this.click} price={this.props.price}/>\n                    \n                </fieldset>\n            </div>\n        )\n        \n    }\n}\n\nexport default BumpStrat;"]},"metadata":{},"sourceType":"module"}