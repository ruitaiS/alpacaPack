{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/strats/bump.js\";\nimport { Component } from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar'; //Automatically place limit sell at buy price + delta\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n//Use all available capital to purchase at that price\n//Shares = capital / price\n//Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n//Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n//Place limit order to liquidate\n//limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n//Considerations:\n//Track session percent gains\n//Changing capital allocation should reset session gain tracking\n//Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\nclass BumpStrat extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n    //api - alpaca trade api\n    //symbol - symbol that we're trading on\n    //price - current price of the asset\n    //Functions that need to get bound to this instance\n    //this.function = this.function.bind(this);\n\n    this.state = {\n      entered: \"false\"\n    };\n  }\n\n  function() {\n    console.log(\"Hi! :)\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Bump Strat\", /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"inputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: this.props.ticker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n          pctChange: \"0.1\",\n          width: \"500\",\n          height: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PriceBtn, {\n          text: \"Test\",\n          click: () => alert(\"clicked\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BumpStrat;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/strats/bump.js"],"names":["Component","PriceBtn","PCTBar","BumpStrat","constructor","props","state","entered","function","console","log","render","ticker","alert"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACI;AACA;AACA;AACJ;AACI;AACJ;AACI;AACA;AACJ;AACA;AACA;AAEA;AACA;AACI;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMC,SAAN,SAAwBH,SAAxB,CAAiC;AAC7BI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;AACA;AACA;AACA;AAGA;AACA;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAIH;;AAEDC,EAAAA,QAAQ,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,4CAEI;AAAU,QAAA,SAAS,EAAC,UAApB;AAAA,gCACI;AAAA,oBAAS,KAAKN,KAAL,CAAWO;AAApB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,KAAlB;AAAwB,UAAA,KAAK,EAAC,KAA9B;AAAoC,UAAA,MAAM,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAKI,QAAC,QAAD;AAAU,UAAA,IAAI,EAAC,MAAf;AAAsB,UAAA,KAAK,EAAE,MAAIC,KAAK,CAAC,SAAD;AAAtC;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAnC4B;;AAsCjC,eAAeV,SAAf","sourcesContent":["import {Component} from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar';\n\n//Automatically place limit sell at buy price + delta\n\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n    //Use all available capital to purchase at that price\n    //Shares = capital / price\n    //Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n    //Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n    //Place limit order to liquidate\n    //limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n\n//Considerations:\n//Track session percent gains\n    //Changing capital allocation should reset session gain tracking\n    //Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\n\n\nclass BumpStrat extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n        //api - alpaca trade api\n        //symbol - symbol that we're trading on\n        //price - current price of the asset\n        \n\n        //Functions that need to get bound to this instance\n        //this.function = this.function.bind(this);\n        this.state = {\n            entered: \"false\",\n\n        }\n    }\n\n    function(){\n        console.log(\"Hi! :)\")\n    }\n\n    render(){\n        return(\n            <div>\n                Bump Strat\n                <fieldset className=\"inputBox\">\n                    <legend>{this.props.ticker}</legend>\n                    <PCTBar pctChange=\"0.1\" width=\"500\" height=\"50\"/>\n\n                    {/*Conditional formatting to change the onclick */}\n                    <PriceBtn text=\"Test\" click={()=>alert(\"clicked\")}/>\n                </fieldset>\n            </div>\n        )\n        \n    }\n}\n\nexport default BumpStrat;"]},"metadata":{},"sourceType":"module"}