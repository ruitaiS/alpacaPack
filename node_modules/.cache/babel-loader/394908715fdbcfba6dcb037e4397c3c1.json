{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/main.js\";\nimport { Component } from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\nimport List from './list';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n\n    this.tickerChange = this.tickerChange.bind(this);\n    this.idChange = this.idChange.bind(this);\n    this.skChange = this.skChange.bind(this);\n    this.streamChange = this.streamChange.bind(this);\n    this.p1Change = this.p1Change.bind(this);\n    this.p2Change = this.p2Change.bind(this);\n    this.pairSwap = this.pairSwap.bind(this);\n    this.streamListener = this.streamListener.bind(this);\n    this.connect = this.connect.bind(this); //this.subscribe = this.subscribe.bind(this);\n    //this.unsubscribe = this.unsubscribe.bind(this);\n\n    this.updatePositions = this.updatePositions.bind(this);\n    this.get_price = this.get_price.bind(this);\n    this.state = {\n      key_id: 'PKHO52XD6BFXD87F8WP5',\n      //key_id: 'bvqgf2n48v6qg460kck0',\n      secret_key: 'QxHhpdHZdO5WFAN6EucqX5odwGWZEN4TKvs63dqq',\n      //positions: '',\n      stream: 'stocks',\n      //stream: 'forex',\n      ticker: 'MSFT',\n      p1: \"USD\",\n      p2: \"CAD\"\n    };\n  } //#region Onchange Functions (Called from Control Panel)\n  //TODO: May need to update the websocket stream & also the api handler\n  //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n  //Need to directly use e.target.value\n\n\n  tickerChange(e) {\n    this.setState({\n      ticker: e.target.value\n    });\n  }\n\n  idChange(e) {\n    this.setState({\n      key_id: e.target.value\n    });\n  }\n\n  skChange(e) {\n    this.setState({\n      secret_key: e.target.value\n    });\n  }\n\n  streamChange(e) {\n    //TODO -> What should the behavior here be wrt to the currently active connections?\n    this.setState({\n      stream: e.target.value\n    }); //this.disconnect()\n    //url state is updated in connect()\n  } //Currency Pair Related Functions\n\n\n  p1Change(e) {\n    this.setState({\n      p1: e.target.value\n    });\n  }\n\n  p2Change(e) {\n    this.setState({\n      p2: e.target.value\n    });\n  }\n\n  pairSwap() {\n    let p1Now = this.state.p1;\n    let p2Now = this.state.p2;\n    this.setState({\n      p1: p2Now\n    });\n    this.setState({\n      p2: p1Now\n    });\n  } //#endregion\n  //websocket callback; parses incoming data\n\n\n  streamListener(msg) {\n    /*TODO\n    See old version of stream\n    Lots of entangled logic that you'll need to parcel out\n    Here specifically you'll just want to update the price\n    Updating chart and percent bar logic should be seperate\n    */\n    let data = JSON.parse(msg.data); //console.log(data)\n    //this.setState({data: JSON.parse(msg.data)})\n    //TODO: The way we handle the message will depend on what stream type we're listening to\n    //Stock Websocket Format:\n    //Subscribe to Ticker after Auth Confirmation:\n\n    if (data[0].message != null) {\n      console.log(data[0].message); //Subscribe to Stream after authentication confirmation\n\n      if (data[0].message === 'authenticated') {\n        this.ws.subscribe(this.state.ticker);\n      }\n    } else {\n      //Message is null, so we assume it is already subscribed to a stream\n      //Print the price\n      console.log(JSON.stringify(data));\n      this.setState({\n        streamData: data\n      });\n    }\n  }\n\n  connect() {\n    //Creates new connections to API and Stream\n    if (this.state.stream === \"stocks\") {\n      this.ws = new Stream(this.state.key_id, 'wss://socket.polygon.io/stocks', this.streamListener);\n      this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets');\n      this.api.get_positions(this.updatePositions);\n      alert(this.state.streamData[0].p);\n    } else {\n      alert(\"Forex support coming soon!\");\n      this.setState({\n        stream: \"stocks\"\n      }); //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.streamListener)\n      //this.api = null\n    }\n  }\n\n  disconnect() {//TODO\n    //this.ws.disconnect()\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Control, {\n        key_id: this.state.key_id,\n        secret_key: this.state.secret_key,\n        ticker: this.state.ticker,\n        stream: this.state.stream,\n        p1: this.state.p1,\n        p2: this.state.p2,\n        idChange: this.idChange,\n        skChange: this.skChange,\n        tickerChange: this.tickerChange,\n        streamChange: this.streamChange,\n        p1Change: this.p1Change,\n        p2Change: this.p2Change,\n        pairSwap: this.pairSwap,\n        connect: this.connect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/main.js"],"names":["Component","Control","API","Stream","List","Main","constructor","props","tickerChange","bind","idChange","skChange","streamChange","p1Change","p2Change","pairSwap","streamListener","connect","updatePositions","get_price","state","key_id","secret_key","stream","ticker","p1","p2","e","setState","target","value","p1Now","p2Now","msg","data","JSON","parse","message","console","log","ws","subscribe","stringify","streamData","api","get_positions","alert","p","disconnect","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nimport List from './list';\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.streamChange = this.streamChange.bind(this);\n\n        this.p1Change = this.p1Change.bind(this);\n        this.p2Change = this.p2Change.bind(this);\n        this.pairSwap = this.pairSwap.bind(this);\n\n        this.streamListener = this.streamListener.bind(this);\n        this.connect = this.connect.bind(this);\n\n        //this.subscribe = this.subscribe.bind(this);\n        //this.unsubscribe = this.unsubscribe.bind(this);\n\n        this.updatePositions = this.updatePositions.bind(this);\n        this.get_price = this.get_price.bind(this);\n\n        this.state = {\n            key_id: 'PKHO52XD6BFXD87F8WP5',\n            //key_id: 'bvqgf2n48v6qg460kck0',\n            secret_key: 'QxHhpdHZdO5WFAN6EucqX5odwGWZEN4TKvs63dqq',\n\n            //positions: '',\n\n            stream: 'stocks',\n            //stream: 'forex',\n            ticker: 'MSFT',\n\n            p1: \"USD\",\n            p2: \"CAD\",\n        }\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n    }\n\n    streamChange(e){\n        //TODO -> What should the behavior here be wrt to the currently active connections?\n        this.setState({stream: e.target.value})\n        //this.disconnect()\n\n        //url state is updated in connect()\n    }\n\n    //Currency Pair Related Functions\n    p1Change(e){\n        this.setState({p1: e.target.value})\n    }\n\n    p2Change(e){\n        this.setState({p2: e.target.value})\n    }\n\n    pairSwap(){\n        let p1Now = this.state.p1\n        let p2Now = this.state.p2\n        this.setState({p1: p2Now})\n        this.setState({p2: p1Now})\n    }\n    //#endregion\n\n    //websocket callback; parses incoming data\n    streamListener(msg){\n        /*TODO\n        See old version of stream\n        Lots of entangled logic that you'll need to parcel out\n        Here specifically you'll just want to update the price\n        Updating chart and percent bar logic should be seperate\n        */\n\n        let data = JSON.parse(msg.data)\n        //console.log(data)\n\n        //this.setState({data: JSON.parse(msg.data)})\n\n        //TODO: The way we handle the message will depend on what stream type we're listening to\n        \n        //Stock Websocket Format:\n        //Subscribe to Ticker after Auth Confirmation:\n        if (data[0].message != null){\n            console.log(data[0].message)\n            //Subscribe to Stream after authentication confirmation\n            if (data[0].message === 'authenticated'){\n                this.ws.subscribe(this.state.ticker)\n            }\n        }else{\n            //Message is null, so we assume it is already subscribed to a stream\n\n            //Print the price\n            console.log(JSON.stringify(data))\n            this.setState({streamData: data})\n        }\n    }\n\n    connect(){\n        //Creates new connections to API and Stream\n        if (this.state.stream === \"stocks\"){\n            this.ws = new Stream(this.state.key_id, 'wss://socket.polygon.io/stocks', this.streamListener)\n            this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n\n            this.api.get_positions(this.updatePositions)\n            alert(this.state.streamData[0].p)\n        }else{\n            alert(\"Forex support coming soon!\")\n            this.setState({stream: \"stocks\"})\n            //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.streamListener)\n            //this.api = null\n        }\n    }\n\n    disconnect(){\n        //TODO\n        //this.ws.disconnect()\n\n    }\n\n\n    render(){\n        return(\n            <div>\n                {/*<List positions={this.state.positions} ws={this.ws} streamData={this.state.streamData} get_price={(ticker)=>this.get_price(ticker)}/>*/}\n                <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} stream={this.state.stream} p1={this.state.p1} p2={this.state.p2} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} streamChange={this.streamChange} p1Change={this.p1Change} p2Change={this.p2Change} pairSwap={this.pairSwap} connect={this.connect}/>\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}