{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/pctBar.js\";\nimport { Component } from \"react\";\n\nclass PCTBar extends Component {\n  constructor(props) {\n    super(props); //pctChange\n    //maxWidth\n    //scale\n\n    this.styling = this.styling.bind(this);\n    this.bar = this.bar.bind(this);\n    this.square = this.square.bind(this);\n    this.subPlot = this.subPlot.bind(this);\n    this.state = {};\n  }\n\n  bar(color) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"68px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this);\n  }\n\n  square(color) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"5px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this);\n  }\n\n  subPlot(pct) {\n    let res = [];\n    console.log(pct); //NOTE: This is still a little bit buggy when converting squares into bars\n\n    if (pct > 0) {\n      for (let i = 0; i <= pct - 0.1; i += 0.1) {\n        res.push(this.bar(\"green\"));\n      }\n\n      for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n        res.push(this.square(\"blue\"));\n      }\n    } else {\n      pct = -pct;\n\n      for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n        res.push(this.square(\"blue\"));\n      }\n\n      for (let i = 0; i <= pct - 0.1; i += 0.1) {\n        res.push(this.bar(\"red\"));\n      }\n    }\n\n    return res;\n  } //Styling for the subplot\n\n\n  subStyle(pct) {} //Styling for the Main Bar\n\n\n  mainStyle(pct) {\n    let barWidth = this.props.maxWidth * Math.abs(pct) * this.props.scale;\n\n    if (pct > 0) {\n      //Positive Change\n      //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.maxWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.subStyle(this.props.pctChange),\n        children: this.subPlot(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.mainStyle(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PCTBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/pctBar.js"],"names":["Component","PCTBar","constructor","props","styling","bind","bar","square","subPlot","state","color","height","width","backgroundColor","margin","pct","res","console","log","i","push","j","subStyle","mainStyle","barWidth","maxWidth","Math","abs","scale","transform","render","pctChange"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //maxWidth\n        //scale\n        this.styling = this.styling.bind(this);\n        this.bar = this.bar.bind(this);\n        this.square = this.square.bind(this);\n        this.subPlot = this.subPlot.bind(this);\n        this.state = {\n        }\n    }\n\n    bar(color){\n        return (<div style={{height: \"5px\", width: \"68px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    square(color){\n        return (<div style={{height: \"5px\", width: \"5px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    subPlot(pct){\n        let res = []\n        console.log(pct)\n\n        //NOTE: This is still a little bit buggy when converting squares into bars\n        if (pct > 0){\n            for (let i = 0; i <= pct - 0.1; i += 0.1){\n                res.push(this.bar(\"green\"))\n            }\n    \n            for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                res.push(this.square(\"blue\"))\n            }\n        }else{\n            pct = -pct\n            for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                res.push(this.square(\"blue\"))\n            }\n\n            for (let i = 0; i <= pct - 0.1; i += 0.1){\n                res.push(this.bar(\"red\"))\n            }\n        }\n\n\n        return res\n    }\n\n    //Styling for the subplot\n    subStyle(pct){\n\n    }\n\n    //Styling for the Main Bar\n    mainStyle(pct){\n        let barWidth = this.props.maxWidth * Math.abs(pct) * this.props.scale\n        if (pct > 0){\n            //Positive Change\n            //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div style={this.subStyle(this.props.pctChange)}>{this.subPlot(this.props.pctChange)}</div>\n                <div style={this.mainStyle(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;"]},"metadata":{},"sourceType":"module"}