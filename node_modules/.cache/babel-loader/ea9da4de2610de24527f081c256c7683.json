{"ast":null,"code":"class API {\n  constructor(key_id, secret_key, url) {\n    this.key_id = key_id;\n    this.secret_key = secret_key;\n    this.url = url;\n  } //Internal Helper Function to elim code redundancy\n\n\n  request(callback, type, endpoint) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open(type, endpoint);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //https://alpaca.markets/docs/api-documentation/api-v2/account/\n\n\n  account(callback) {\n    this.request(callback, 'GET', `${this.url}/v2/account`);\n    /*\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n    */\n  } //Order Related Documentation & Functions\n  //Example of JSON order\n  //https://alpaca.markets/docs/trading-on-alpaca/orders/\n  //List of required parameters\n  //https://alpaca.markets/docs/api-documentation/api-v2/orders/\n\n\n  get_orders(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('GET', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  }\n\n  buy(callback, ticker, qty, type, time_in_force) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('POST', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    let order = {\n      \"side\": \"buy\",\n      \"symbol\": {\n        ticker\n      },\n      \"qty\": {\n        qty\n      },\n      \"type\": {\n        type\n      },\n      \"time_in_force\": {\n        time_in_force\n      }\n    };\n    xhr.send(JSON.stringify(order));\n  }\n\n  sell(callback, ticker, qty, type, time_in_force) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('POST', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    let order = {\n      \"side\": \"sell\",\n      \"symbol\": {\n        ticker\n      },\n      \"qty\": {\n        qty\n      },\n      \"type\": {\n        type\n      },\n      \"time_in_force\": {\n        time_in_force\n      }\n    };\n    xhr.send(JSON.stringify(order));\n  } //This cancels all orders - see second link above for ways to cancel specific orders\n\n\n  cancel(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => callback(xhr.responseText));\n    xhr.open('DELETE', `${this.url}/v2/orders`);\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id);\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key);\n    xhr.send();\n  } //Position Related Documentation & Functions\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/\n\n\n  get_positions(callback) {} //Functions for Updating Login Parameters\n  //These may be depreciated, since now we just create a new instance of API on connect\n\n\n  idChange(key_id) {\n    this.key_id = key_id;\n  }\n\n  skChange(secret_key) {\n    this.secret_key = secret_key;\n  }\n\n  urlChange(url) {\n    this.url = url;\n  }\n\n}\n\nexport default API;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/apiHandler.js"],"names":["API","constructor","key_id","secret_key","url","request","callback","type","endpoint","xhr","XMLHttpRequest","addEventListener","responseText","open","setRequestHeader","send","account","get_orders","buy","ticker","qty","time_in_force","order","JSON","stringify","sell","cancel","get_positions","idChange","skChange","urlChange"],"mappings":"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","sourcesContent":["class API {\n  constructor(key_id, secret_key, url) {\n    this.key_id = key_id\n    this.secret_key = secret_key\n    this.url = url\n  }\n\n  //Internal Helper Function to elim code redundancy\n  request(callback, type, endpoint){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open(type, endpoint)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n\n  //https://alpaca.markets/docs/api-documentation/api-v2/account/\n  account(callback){\n    this.request(callback, 'GET', `${this.url}/v2/account`)\n    /*\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n    */\n  }\n\n    //Order Related Documentation & Functions\n\n    //Example of JSON order\n    //https://alpaca.markets/docs/trading-on-alpaca/orders/\n\n    //List of required parameters\n    //https://alpaca.markets/docs/api-documentation/api-v2/orders/\n\n\n\n  get_orders(callback){\n      let xhr = new XMLHttpRequest()\n      xhr.addEventListener('load', ()=>callback(xhr.responseText))\n      xhr.open('GET', `${this.url}/v2/orders`)\n      xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n      xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n      xhr.send()\n  }\n    \n  buy(callback, ticker, qty, type, time_in_force){      \n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"buy\",\n      \"symbol\": {ticker},\n      \"qty\" : {qty},\n      \"type\": {type},\n      \"time_in_force\": {time_in_force}\n    }\n\n    xhr.send(JSON.stringify(order))\n  }\n  \n  sell(callback, ticker, qty, type, time_in_force){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"sell\",\n      \"symbol\": {ticker},\n      \"qty\" : {qty},\n      \"type\": {type},\n      \"time_in_force\": {time_in_force}\n    }\n\n    xhr.send(JSON.stringify(order))\n  }\n\n  //This cancels all orders - see second link above for ways to cancel specific orders\n  cancel(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('DELETE', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Position Related Documentation & Functions\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/\n  get_positions(callback){\n\n  }\n\n\n\n  //Functions for Updating Login Parameters\n  //These may be depreciated, since now we just create a new instance of API on connect\n  idChange(key_id){\n    this.key_id = key_id\n  }\n\n  skChange(secret_key){\n    this.secret_key = secret_key\n  }\n\n  urlChange(url){\n    this.url = url\n  }\n\n}\n\nexport default API;"]},"metadata":{},"sourceType":"module"}