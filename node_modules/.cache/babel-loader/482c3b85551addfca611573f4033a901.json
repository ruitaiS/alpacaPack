{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/stream.js\";\n//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\nimport React, { Component } from \"react\";\n\nclass Stream extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket('wss://socket.polygon.io/stocks');\n    this.state = {\n      key_id: props.key_id,\n      secret_key: props.secret_key,\n      ticker: props.ticker\n    };\n  } // instance of websocket connection as a class property\n  //Stocks Websocket\n\n\n  //Forex Websocket\n  //ws = new WebSocket('wss://socket.polygon.io/forex')\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n      let auth_data = {\n        \"action\": \"auth\",\n        \"params\": this.state.key_id\n      };\n      this.ws.send(JSON.stringify(auth_data)); //Make this generic\n\n      let listen_message = {\n        \"action\": \"subscribe\",\n        \"params\": \"T.\" + this.state.ticker\n      };\n      this.ws.send(JSON.stringify(listen_message));\n    };\n\n    this.ws.onmessage = evt => {\n      let data = JSON.parse(evt.data);\n      console.log(data[0].p);\n      this.setState({\n        price: data[0].p\n      });\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  mouseOver() {\n    //Store current stream price\n    this.setState({\n      buyPrice: this.state.price\n    });\n  }\n\n  mouseOut() {//Reset / remove buyPrice?\n  }\n\n  click() {\n    //Place a limit order at the buyPrice\n    console.log(\"Clicked\");\n  }\n\n  render() {\n    //We want this to actually hold at the buyPrice when you do a mouseOver\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: \"click()\",\n      children: this.state.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["React","Component","Stream","constructor","props","ws","WebSocket","state","key_id","secret_key","ticker","componentDidMount","onopen","console","log","auth_data","send","JSON","stringify","listen_message","onmessage","evt","data","parse","p","setState","price","onclose","mouseOver","buyPrice","mouseOut","click","render"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAC3BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAYlBC,EAZkB,GAYb,IAAIC,SAAJ,CAAc,gCAAd,CAZa;AAEd,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MADL;AAETC,MAAAA,UAAU,EAAEL,KAAK,CAACK,UAFT;AAGTC,MAAAA,MAAM,EAAEN,KAAK,CAACM;AAHL,KAAb;AAKH,GAR0B,CAU3B;AAEA;;;AAGA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,EAAL,CAAQO,MAAR,GAAiB,MAAM;AACvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIC,SAAS,GAAG;AAAC,kBAAS,MAAV;AAAiB,kBAAU,KAAKR,KAAL,CAAWC;AAAtC,OAAhB;AAEA,WAAKH,EAAL,CAAQW,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAb,EALuB,CAOvB;;AACA,UAAII,cAAc,GAAG;AAAC,kBAAS,WAAV;AAAsB,kBAAS,OAAK,KAAKZ,KAAL,CAAWG;AAA/C,OAArB;AAEA,WAAKL,EAAL,CAAQW,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAeC,cAAf,CAAb;AAGC,KAbD;;AAeA,SAAKd,EAAL,CAAQe,SAAR,GAAoBC,GAAG,IAAI;AAE3B,UAAIC,IAAI,GAAGL,IAAI,CAACM,KAAL,CAAWF,GAAG,CAACC,IAAf,CAAX;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAAC,CAAD,CAAJ,CAAQE,CAApB;AAEA,WAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQE;AAAhB,OAAd;AACC,KAND;;AAQA,SAAKnB,EAAL,CAAQsB,OAAR,GAAkB,MAAM;AACxBd,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADwB,CAExB;AAEC,KAJD;AAMH;;AAEDc,EAAAA,SAAS,GAAE;AACP;AACA,SAAKH,QAAL,CAAc;AAACI,MAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWmB;AAAtB,KAAd;AACH;;AAEDI,EAAAA,QAAQ,GAAE,CACN;AACH;;AAEDC,EAAAA,KAAK,GAAE;AACH;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEH;;AAEDkB,EAAAA,MAAM,GAAE;AACJ;AACA,wBAAO;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAAA,gBAA2B,KAAKzB,KAAL,CAAWmB;AAAtC;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AApE0B;;AAuE/B,eAAexB,MAAf","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\nimport React, { Component }from \"react\";\n\nclass Stream extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            key_id: props.key_id,\n            secret_key: props.secret_key,\n            ticker: props.ticker,\n        }\n    }\n\n    // instance of websocket connection as a class property\n\n    //Stocks Websocket\n    ws = new WebSocket('wss://socket.polygon.io/stocks')\n\n    //Forex Websocket\n    //ws = new WebSocket('wss://socket.polygon.io/forex')\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected')\n        let auth_data = {\"action\":\"auth\",\"params\": this.state.key_id}\n    \n        this.ws.send(JSON.stringify(auth_data))\n\n        //Make this generic\n        let listen_message = {\"action\":\"subscribe\",\"params\":\"T.\"+this.state.ticker}\n\n        this.ws.send(JSON.stringify(listen_message))            \n\n\n        }\n\n        this.ws.onmessage = evt => {\n\n        let data = JSON.parse(evt.data)\n        console.log(data[0].p)\n\n        this.setState({price: data[0].p})\n        }\n\n        this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n\n    }\n\n    mouseOver(){\n        //Store current stream price\n        this.setState({buyPrice: this.state.price})\n    }\n\n    mouseOut(){\n        //Reset / remove buyPrice?\n    }\n\n    click(){\n        //Place a limit order at the buyPrice\n        console.log(\"Clicked\")\n\n    }\n\n    render(){\n        //We want this to actually hold at the buyPrice when you do a mouseOver\n        return(<button onclick=\"click()\">{this.state.price}</button>)\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}