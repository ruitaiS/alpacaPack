{"version":3,"sources":["Components/control.js","Components/apiHandler.js","Components/stream.js","Components/priceButton.js","Components/pctBar.js","Components/strats/bump.js","Components/main.js","App.js","reportWebVitals.js","index.js"],"names":["Control","props","state","currencyOptions","bind","currencies","exclude","res","this","currency","push","value","streamParams","stream","htmlFor","connected","disabled","style","float","width","textAlign","id","ticker","onChange","tickerChange","display","flexDirection","justifyContent","fontSize","margin","p1","p1Change","p2","p2Change","onClick","pairSwap","className","key_id","idChange","secret_key","skChange","streamChange","disconnect","connect","Component","API","url","callback","xhr","XMLHttpRequest","addEventListener","responseText","open","setRequestHeader","send","symbol","qty","type","price","time_in_force","order","JSON","stringify","Stream","finnhubURL","alpacaURL","finnhubCallback","alpacaCallback","fhConnect","finnhub","WebSocket","alpaca","onopen","console","log","onmessage","msg","data","text","then","onclose","close","PriceBtn","mouseOver","mouseOut","click","setState","holdPrice","onMouseOver","onMouseOut","PCTBar","mainStyle","bar","square","subPlot","subStyle","color","key","height","backgroundColor","pct","length","i","j","barWidth","Math","trunc","abs","transform","pctChange","BumpStrat","startCapital","deltaChange","capChange","autoSellChange","limitChange","apiConfirm","logOrders","test","openOrders","positions","capital","shares","autoSell","fracShares","limit","delta","status","e","parseFloat","target","checked","prevProps","entry_price","api","sell","exit_price","Object","keys","orders","parse","Array","isArray","datum","body","side","limit_price","cancelOrder","floor","alert","buy","buttonText","name","min","max","step","cancel","Main","priceListener","tradeStatusListener","apiPositionListener","updatePositions","testClick","logPos","clearOrders","streamData","p1Now","p2Now","s","p","ws","streams","forEach","x","event","filled_qty","filled_avg_price","position","subscribe","avg_entry_price","lastday_price","get_positions","get_orders","unsubscribe","orderID","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d060c0a.chunk.js","sourcesContent":["import {Component} from \"react\";\n\n//TODO: There are a lot of parameters being passed to control...\nclass Control extends Component{\n    constructor(props) {\n      //key_id\n      //secret_key\n      //ticker\n      //idChange\n      //skChange\n      //tickerChange\n      //streamChange\n      //connected (boolean)\n\n      super(props);\n      this.state = {\n        };\n      this.currencyOptions = this.currencyOptions.bind(this)\n\n      //TODO: More Comprehensive List\n      //https://www.xe.com/symbols.php\n      this.currencies = [\"USD\", \"CAD\", \"JPY\"]\n    }\n\n    currencyOptions(exclude){\n      let res = []\n      for (let currency of this.currencies){\n        if (currency !== exclude){\n          res.push(\n            <option key={currency} value={currency}>{currency}</option>\n          )\n        }\n      }\n      return res\n    }\n  \n    render() {\n\n      //Conditional Rendering for Stream Parameter Input\n      let streamParams\n      if (this.props.stream === 'stocks'){\n        streamParams =               \n        (<div>\n        <label htmlFor=\"tck\">Ticker:</label>\n        {/*Disable ticker symbol input box after connection */}\n        {this.props.connected ?\n          <input disabled style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"tck\" value={this.props.ticker} onChange={this.props.tickerChange}/>\n          :\n          <input style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"tck\" value={this.props.ticker} onChange={this.props.tickerChange}/>\n        }\n        </div>)\n      }else{ //Currently unused Forex control\n        //janky right margin on the second select box to make it centered\n        streamParams =(\n        <div>\n        <label htmlFor=\"pair\">Pair:</label>\n          <div id=\"pair\" style={{float:\"right\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-evenly\", fontSize:\"15px\"}}>\n          <select style={{width:\"50px\", textAlign:\"center\", margin:\"0px 10px 0px 10px\"}} value={this.props.p1} onChange={this.props.p1Change}>\n                {this.currencyOptions(this.props.p2)}\n          </select>\n          to\n          <select style={{width:\"50px\", textAlign:\"center\", margin:\"0px 10px 0px 10px\"}} value={this.props.p2} onChange={this.props.p2Change}>\n                {this.currencyOptions(this.props.p1)}\n          </select>\n          <button style={{width:\"50px\", textAlign:\"center\", margin:\"0px 50px 0px 10px\"}} onClick={this.props.pairSwap}>Swap</button>\n          </div>\n        </div>\n        )\n      }\n\n      return (\n        <div>\n          <fieldset className=\"inputBox\">\n              <legend>Control Panel:</legend>\n\n              <div>\n              <label htmlFor=\"key\">Key ID:</label>\n              {this.props.connected ?\n              <input disabled style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"key\" value={this.props.key_id} onChange={this.props.idChange}/>\n              :\n              <input style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"key\" value={this.props.key_id} onChange={this.props.idChange}/>\n              }\n              </div>\n              \n              <div>\n              <label htmlFor=\"secret\">Secret Key:</label>\n              {this.props.stream === \"forex\" || this.props.connected ? \n                <input style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"secret\" disabled value=\"N/A\"/>\n                :\n                <input style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} id=\"secret\" value={this.props.secret_key} onChange={this.props.skChange}/>\n              }\n              </div>\n\n              <div>\n              <label htmlFor=\"stream\">Stream:</label>\n              <select disabled id=\"stream\" style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} value={this.props.stream} onChange={this.props.streamChange}>\n              <option value=\"stocks\">Stocks</option>\n              <option value=\"forex\">Forex</option>\n              </select>\n              </div>\n\n              {streamParams}\n              {this.props.connected ?\n              <button style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} onClick={this.props.disconnect}>Disconnect</button>\n              :\n              <button style={{float:\"right\", width:\"350px\", textAlign:\"center\"}} onClick={this.props.connect}>Connect</button>\n              }\n          </fieldset>\n        </div>\n      );\n    }\n  }\n\nexport default Control;","class API {\n  constructor(key_id, secret_key, url) {\n    this.key_id = key_id\n    this.secret_key = secret_key\n    this.url = url\n  }\n\n\n  //https://alpaca.markets/docs/api-documentation/api-v2/account/\n  account(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  get_history(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/account/portfolio/history`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n    //Order Related Documentation & Functions\n\n    //Example of JSON order\n    //https://alpaca.markets/docs/trading-on-alpaca/orders/\n\n    //List of required parameters\n    //https://alpaca.markets/docs/api-documentation/api-v2/orders/\n\n  get_orders(callback){\n      let xhr = new XMLHttpRequest()\n      xhr.addEventListener('load', ()=>callback(xhr.responseText))\n      xhr.open('GET', `${this.url}/v2/orders`)\n      xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n      xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n      xhr.send()\n  }\n   \n  //For now just assume limit orders; implement the other types when you get the chance\n  //also do we really need the callback here?\n  buy(callback, symbol, qty, type, price, time_in_force){      \n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"buy\",\n      \"symbol\": symbol,\n      \"qty\" : qty,\n      \"type\": type,\n      \"limit_price\": price,\n      \"time_in_force\": time_in_force,\n      \"extended_hours\": true\n    }\n\n    xhr.send(JSON.stringify(order))\n  }\n  \n  sell(callback, symbol, qty, type, price, time_in_force){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('POST', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n\n    let order = {\n      \"side\" : \"sell\",\n      \"symbol\": symbol,\n      \"qty\" : qty,\n      \"type\": type,\n      \"limit_price\": price,\n      \"time_in_force\": time_in_force\n    }\n\n    //console.log(JSON.stringify(order))\n\n    /*\n    stop_price\n    trail_price\n    trail_percent\n    */\n\n    xhr.send(JSON.stringify(order))\n  }\n\n  //This cancels all orders - see second link above for ways to cancel specific orders\n  cancel(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('DELETE', `${this.url}/v2/orders`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  cancelOrder(id, callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('DELETE', `${this.url}/v2/orders/${id}`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Position Related Documentation & Functions\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/\n  //https://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity\n  get_positions(callback){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/positions`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Get Position for a single ticker symbol\n  get_position(callback, ticker){\n    let xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', ()=>callback(xhr.responseText))\n    xhr.open('GET', `${this.url}/v2/positions/${ticker}`)\n    xhr.setRequestHeader(\"APCA-API-KEY-ID\", this.key_id)\n    xhr.setRequestHeader(\"APCA-API-SECRET-KEY\", this.secret_key)\n    xhr.send()\n  }\n\n  //Functions for Updating Login Parameters\n  //These may be depreciated, since now we just create a new instance of API on connect\n  idChange(key_id){\n    this.key_id = key_id\n  }\n\n  skChange(secret_key){\n    this.secret_key = secret_key\n  }\n\n  urlChange(url){\n    this.url = url\n  }\n\n}\n\nexport default API;","//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\n//Uses the finnhub websocket for trades\n//https://finnhub.io/docs/api/websocket-trades\n\n\n//TODO: This will need different methods depending on which websocket is being used, since they all seem to have different formats and standards\n//For now just use the stocks endpoint to build everything out\n\nclass Stream{\n    //constructor(key_id, url, callback){\n    constructor(key_id, secret_key, finnhubURL, alpacaURL, finnhubCallback, alpacaCallback, fhConnect){\n        this.finnhub = new WebSocket(finnhubURL) //Live Price Stream\n        this.alpaca = new WebSocket(alpacaURL) //Trade Status Updates Stream\n\n\n        //this.subscriptionList = [];\n\n        //Send Authentication Message On Open:\n        //TODO: Error handling on failure to authenticate        \n        this.finnhub.onopen = () => {\n            console.log(\"stream/finnhub.onopen: Connected to FinnHub Price Stream\")\n            fhConnect()\n            //this.polygon.send(JSON.stringify({\"action\":\"auth\",\"params\": key_id}))\n        }\n        this.alpaca.onopen = () => {\n            console.log(\"stream/alpaca.onopen: Authenticating Alpaca Trade Updates Stream\")\n            this.alpaca.send(JSON.stringify({\"action\":\"authenticate\",\"data\": {\"key_id\": key_id, \"secret_key\":secret_key}}))\n        }\n\n        //TODO: Could I just use onmessage = callback(msg)?\n        this.finnhub.onmessage = msg => {\n            finnhubCallback(msg)\n        }\n        this.alpaca.onmessage = msg => {\n            //msg.data is a blob containing a promise\n            //text() uncovers the promise, then() is the callback on promise resolution\n            //res is the actual json string\n            msg.data.text().then(res => {\n                alpacaCallback(res)\n            })\n        }\n\n        this.finnhub.onclose = () =>{\n            console.log(\"stream/finnhub.onclose: Disconnected from Price Stream\")\n        }\n        this.alpaca.onclose = () =>{\n            console.log(\"stream/alpaca.onclose: Disconnected from Trade Updates Stream\")\n        }\n    }\n\n    //For Trade Stream Only:\n    subscribe(ticker){\n        console.log(`stream/subscribe: Subscribing to ${ticker}`)\n        this.finnhub.send(JSON.stringify({'type':'subscribe', 'symbol': ticker}))\n    }\n\n    unsubscribe(ticker){\n        console.log(`stream/unsubscribe: Unsubscribing from ${ticker}`)\n        this.finnhub.send(JSON.stringify({'type':'unsubscribe', 'symbol': ticker}))\n    }\n\n    disconnect(){\n        this.finnhub.close()\n        this.alpaca.close()\n    }\n}\n\nexport default Stream;","import {Component} from \"react\";\n\n//Generic button that takes a price stream, \n\nclass PriceBtn extends Component{\n    constructor(props){\n        super(props);\n        //text - The text displayed on the button\n        //value - live price data that comes in\n        //click - function that gets called when the button is clicked\n\n        //Functions that need to get bound to this instance\n        //this.function = this.function.bind(this);\n        this.mouseOver = this.mouseOver.bind(this);\n        this.mouseOut = this.mouseOut.bind(this);\n        this.click = this.click.bind(this);\n\n        this.state = {\n            //Default state initialization\n        }\n    }\n\n    mouseOver(){\n        console.log(\"MouseOver\")\n        this.setState({holdPrice: this.props.value})\n        //alert(this.state.holdPrice)\n    }\n\n    mouseOut(){\n        console.log(\"MouseOut\")\n        this.setState({holdPrice: null})\n    }\n\n    click(){\n        this.props.click(this.state.holdPrice)\n    }\n\n    render(){\n        return(\n        <div>\n            <button className=\"bigBtn\" onClick={this.click} onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>{this.props.text}: ${this.state.holdPrice != null ? this.state.holdPrice : this.props.value}</button>\n        </div>\n        )\n        \n    }\n}\n\nexport default PriceBtn;","import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //width\n        //height\n        this.mainStyle = this.mainStyle.bind(this);\n        this.bar = this.bar.bind(this);\n        this.square = this.square.bind(this);\n        this.subPlot = this.subPlot.bind(this);\n        this.subStyle = this.subStyle.bind(this);\n        this.state = {\n        }\n    }\n\n    bar(color, key){\n        return (<div key={key} style={{height: \"5px\", width: \"68px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    square(color, key){\n        return (<div key={key} style={{height: \"5px\", width: \"5px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    subPlot(pct){\n        let res = []\n\n        if (((pct > -0.01)&&(pct < 0.01))||(pct == null)){\n            //Placeholder blank bar, otherwise it shifts up b/c missing element\n            res.push(this.bar(\"white\", `${this.props.symbol}${res.length}`))\n        }else{\n            //NOTE: This is still a little bit buggy when converting squares into bars\n            if (pct > 0){\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"green\", `${this.props.symbol}${res.length}`))\n                }\n        \n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`))\n                }\n            }else{\n                pct = -pct\n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\", `${this.props.symbol}${res.length}`))\n                }\n\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"red\", `${this.props.symbol}${res.length}`))\n                }\n            }            \n        }\n        return res\n    }\n\n    //Styling for the subplot\n    subStyle(pct){\n        if (pct < 0){\n            let barWidth = (Math.trunc(Math.abs(pct)*100))*7\n            return {display:\"flex\", transform: `translate(${(this.props.width/2)-barWidth}px, 0px)`}\n        }else{\n            return {display:\"flex\", transform: `translate(${(this.props.width/2)}px, 0px)`}\n        }\n    }\n\n    //Styling for the Main Bar\n    mainStyle(pct){\n        //Main Bar Represents Single Percentage\n        pct = (pct%0.01)*100\n\n        let barWidth = (this.props.width/2) * Math.abs(pct)\n        if (pct > 0){\n            //Positive Change\n            //return{transform: `translate(${(this.props.width/2)}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${(this.props.width/2)}px, 0px)`, height: `${this.props.height}px`, width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${(this.props.width/2) - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${(this.props.width/2) - barWidth}px, 0px)`, height: `${this.props.height}px`, width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n    }\n\n    render(){\n        //NOTE: Setting the width of the encapsulating div has strange effects on centering\n        return(\n            <div>\n                <div style={this.subStyle(this.props.pctChange)}>{this.subPlot(this.props.pctChange)}</div>\n                <div style={this.mainStyle(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;","import {Component} from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar';\n\n//Automatically place limit sell at buy price + delta\n\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n    //Use all available capital to purchase at that price\n    //Shares = capital / price\n    //Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n    //Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n    //Place limit order to liquidate\n    //limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n\n//Considerations:\n//Track session percent gains\n    //Changing capital allocation should reset session gain tracking\n    //Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\n\n\nclass BumpStrat extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n        //api - alpaca trade api\n        //ticker - symbol that we're trading on\n        //value - current price of the asset\n\n        //positions\n        \n\n        //Functions that need to get bound to this instance\n        this.deltaChange = this.deltaChange.bind(this);\n        this.capChange = this.capChange.bind(this);\n        this.autoSellChange = this.autoSellChange.bind(this);\n        this.limitChange = this.limitChange.bind(this);\n\n\n        this.click = this.click.bind(this);\n        this.apiConfirm = this.apiConfirm.bind(this);\n        this.logOrders = this.logOrders.bind(this);\n\n        this.test = this.test.bind(this);\n\n        this.openOrders = {}\n\n        let startCapital\n        if(this.props.positions.qty !== 0){\n            startCapital = 0\n        }else{\n            startCapital = 10000\n        }\n\n        this.state = {\n            //This assumes we start out *not* in a position\n            //It will fuck up & double count if we already are in a position\n            capital: startCapital,\n            shares: this.props.positions.qty,\n\n            autoSell: true,\n            fracShares: false,\n            limit: '',\n            delta: 0.01,\n\n            openOrders: {},\n            status: \"out\", //out, in, waiting-entry, waiting-exit\n\n            \n        }\n    }\n\n    test(){\n        console.log(this.props.positions)\n    }\n\n    deltaChange(e){\n        this.setState({delta: parseFloat(e.target.value)})\n        console.log(`New Delta: ${this.state.delta}`)\n    }\n\n    limitChange(e){\n        this.setState({limit: e.target.value})\n        console.log(`New Limit: ${this.state.limit}`)\n    }\n\n    capChange(e){\n        this.setState({capital: e.target.value})\n        console.log(`New Starting Allocation: ${this.state.capital}`)\n        //Reset the statistics too\n    }\n\n    autoSellChange(e){\n        this.setState({autoSell: e.target.checked})\n        console.log(`AutoSell set to ${e.target.checked}`)\n    }\n\n    //This is kind of shitty because it will do it even when it's just the price data changing\n    //Ideally you want to call a function in bump from the parent component\n    componentDidUpdate(prevProps){\n\n        //Not sure why, but this seems to only fire when an order is filled, partially filled, or cancelled\n        //Eg. When an order is closed\n        if (prevProps.positions !== this.props.positions){\n            //console.log(\"bump/componentDidUpdate: Orders changed\")\n            //console.log(`bump/componentDidUpdate: Positions changed from ${JSON.stringify(prevProps.positions)} to ${JSON.stringify(this.props.positions)}`)\n\n            \n            if(prevProps.positions.qty === 0 && this.props.positions.qty !== 0){\n                console.log(`bump/componentDidUpdate: Bought ${this.props.positions.qty} shares at ${this.props.positions.entry_price} per share`)\n                this.setState({capital: this.state.capital - (this.props.positions.qty * this.props.positions.entry_price)})\n                this.setState({shares: this.props.positions.qty})\n\n                //Place Sell Order Immediately If AutoSell enabled:\n                if (this.state.autoSell){\n                    let symbol = this.props.ticker\n                    let qty = this.props.positions.qty\n                    let type = \"limit\"\n                    let price = this.props.positions.entry_price + this.state.delta\n                    let time_in_force = \"day\"\n                    console.log(`bump/componentDidUpdate: Placing AutoSell Order for ${qty} shares of ${symbol} at $${price} per share`)\n                    this.props.api.sell((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n                }\n\n            }else if (prevProps.positions.qty !== 0 && this.props.positions.qty === 0){\n                console.log(`bump/componentDidUpdate: Sold ${prevProps.positions.qty} shares at ${this.props.positions.exit_price} per share`)\n                this.setState({capital: this.state.capital + (prevProps.positions.qty * this.props.positions.exit_price)})\n                this.setState({shares: 0})\n            }\n\n\n            for (let id of Object.keys(this.openOrders)){\n                if (this.props.positions.orders.id == null){\n                    console.log(`bump/componentDidUpdate: Removing order ${id} from openOrders`)\n                    delete this.openOrders[id]\n                }\n            }\n            this.setState({openOrders: this.openOrders})\n        }\n\n        //Check if any orders went from open to closed\n    }\n\n    logOrders(){\n\n        console.log(`bump/logOrders: ${JSON.stringify(this.state.openOrders)}`)\n        if (this.state.openOrders == null){\n            console.log(`bump/logOrders: No open orders for ${this.props.ticker}`)\n        }\n        else if (Object.keys(this.state.openOrders).length !== 0){\n            console.log(`bump/logOrders: Currently Open Orders for ${this.props.ticker}: ${JSON.stringify(this.state.openOrders)}`)\n        }\n    }\n\n    apiConfirm(msg){\n        //API buy callback; stores the confirmation info\n        //TODO: make sure it works for cancellations too\n\n        //When cancelling, I think it gives an empty array if there are no orders to cancel\n\n        //AFAIK, if it returns an empty message it means nothing happened, so whatever you tried to do didn't work\n        //In these scenarios it returns false and exist\n        //Otherwise it updates the openorders, \n\n        if (msg === \"\" || msg === \"[]\"){\n            console.log(\"bump/apiConfirm: No message\")\n            return false\n        }else{\n\n            console.log(`bump/apiConfirm: Alpaca API Callback: ${msg}`)\n            let data = JSON.parse(msg)\n            if (!Array.isArray(data)){\n                data = [data]\n            }\n\n            for (let datum of data){\n                //Cancel response nests the info within the body, so we need to extract\n                if(datum.body != null){\n                    this.openOrders[datum.id]= {side: datum.body.side, qty: datum.body.qty, price: datum.body.limit_price, status: datum.body.status}\n                    console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.body.side} ${datum.body.qty} shares of ${datum.body.symbol} for ${datum.body.limit_price}. Status: ${datum.body.status}`)                    \n                }else{\n                    this.openOrders[datum.id]= {side: datum.side, qty: datum.qty, price: datum.limit_price, status: datum.status}\n                    console.log(`bump/apiConfirm: Order ${datum.id} : ${datum.side} ${datum.qty} shares of ${datum.symbol} for ${datum.limit_price}. Status: ${datum.status}`)\n                }\n                this.setState({openOrders: this.openOrders})\n            }\n\n            //this.logOrders()\n\n            return true\n        }\n    }\n\n    click(price){\n\n        //if waiting to complete an order, then clicking will cancel it\n        //if not in a position, then it will place a buy\n        //if in a position, then it will place a sell\n\n        if (Object.keys(this.state.openOrders).length !== 0){\n            for (let id of Object.keys(this.state.openOrders)){\n                console.log(`bump/click: Cancelling order: ${id}`)\n                this.props.api.cancelOrder(id, this.apiConfirm)\n            }\n\n            console.log(`bump/click: Open Orders: ${JSON.stringify(this.state.openOrders)}`)\n\n            //Rather than cancel, you could instead update the order to use the most recent price\n            //We already have a seperate cancel button\n        }else{\n            if (this.props.positions.qty === 0){\n                //Place a limit buy order\n                //On completion, place limit sell @ delta\n                let symbol = this.props.ticker\n                let qty = Math.floor(this.state.capital / price)\n                let type = \"limit\"\n                let time_in_force = \"day\"\n                if(qty === 0){\n                    alert(\"Not Enough Capital to Purchase any Shares\")\n                }else{\n                    this.props.api.buy((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n                }\n                \n            }else{\n                //place a limit sell\n                let symbol = this.props.ticker\n                let qty = this.props.positions.qty\n                let type = \"limit\"\n                let time_in_force = \"day\"\n                this.props.api.sell((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n            }    \n        }\n\n        /*\n        if (this.state.status === \"out\"){\n            //Place a limit buy order\n            //On completion, place limit sell @ delta\n            let symbol = this.props.ticker\n            let qty = Math.floor(this.state.capital / price)\n            let type = \"limit\"\n            let time_in_force = \"gtc\"\n            this.props.api.buy((msg)=>this.apiConfirm(msg), symbol, qty, type, price, time_in_force)\n            \n        }else if (this.state.status === \"in\"){\n            //Place limit sell\n\n        }else if (this.state.status === \"waiting-entry\"){\n            //Cancel existing buy order\n\n        }else if (this.state.status === \"waiting-exit\"){\n            //Cancel sell order\n            //\n        }*/\n    }\n\n    render(){\n        let buttonText\n        \n        //Mar 5: This text won't reset after exiting positions\n        if (Object.keys(this.state.openOrders).length === 0){\n            if(this.props.positions.qty === 0){\n                buttonText = \"Enter at\"   \n            }else{\n                buttonText = \"Exit at\"\n            }\n            \n        }else{\n            //assumes we only have one order in openOrders\n            buttonText = `Cancel ${this.openOrders[Object.keys(this.openOrders)[0]].side} at $${this.openOrders[Object.keys(this.openOrders)[0]].price}`\n            \n        }\n\n        return(\n            <div>\n                Bump Strat\n                <fieldset className=\"inputBox\">\n                    <legend>{`Current Price: $${this.props.value}`}</legend>\n                    <PCTBar pctChange=\"0.1\" width=\"500\" height=\"50\"/>\n\n                    Cash on Hand: ${this.state.capital}\n                    <br></br>\n                    Shares: {this.props.positions.qty}\n\n                    <div>\n                        <label htmlFor=\"slider\">Capital Allocation</label>\n                        {/*Only enable if no pending orders and no shares held */}\n                        {(Object.keys(this.state.openOrders).length === 0 && this.props.positions.qty === 0) ? \n                            <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                            :\n                            <input disabled style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                        }\n                    </div>\n\n                    <div>\n                    <label>Auto Sell:</label>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} name=\"autoSell\" type=\"checkbox\" checked={this.state.autoSell} onChange={this.autoSellChange} />\n                    </div>\n\n                    <div>\n                        <label htmlFor=\"slider\">Delta: ${this.state.delta}</label>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} type=\"range\" min=\"0\" max=\"10\" step={0.01} value={this.state.delta} className=\"slider\" id=\"slider\" onChange={this.deltaChange}/>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.delta} onChange={this.deltaChange}/>\n                    </div>\n\n                    <PriceBtn text={buttonText} click={this.click} value={this.props.value}/>\n                    <button onClick={this.logOrders}>Log Open Orders</button>\n                    <button onClick={this.test}>Test Function</button>\n                    <button onClick={()=>this.props.api.cancel((msg)=>this.apiConfirm(msg))}>Cancel All</button>                    \n                </fieldset>\n\n                <fieldset className=\"inputBox\">\n                <legend>Manual Control</legend>\n                    <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.limit} onChange={this.limitChange}/>\n                    <button onClick={()=>this.click(this.state.limit)}>{buttonText}: ${this.state.limit}</button>\n\n                </fieldset>\n            </div>\n        )\n        \n    }\n}\n\nexport default BumpStrat;","import {Component} from \"react\";\n\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\nimport BumpStrat from './strats/bump';\n\n//import config from './config.json'\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.streamChange = this.streamChange.bind(this);\n\n        this.p1Change = this.p1Change.bind(this);\n        this.p2Change = this.p2Change.bind(this);\n        this.pairSwap = this.pairSwap.bind(this);\n\n        this.priceListener = this.priceListener.bind(this);\n        this.tradeStatusListener = this.tradeStatusListener.bind(this);\n        this.apiPositionListener = this.apiPositionListener.bind(this);\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.updatePositions = this.updatePositions.bind(this);\n\n        this.fhConnect = this.fhConnect.bind(this);\n\n        //this.storeConfig = this.storeConfig.bind(this);\n\n        this.testClick = this.testClick.bind(this);\n        this.logPos = this.logPos.bind(this);\n        this.clearOrders = this.clearOrders.bind(this);\n\n        //this.subscribe = this.subscribe.bind(this);\n        //this.unsubscribe = this.unsubscribe.bind(this);\n\n        //this.initPositions = this.initPositions.bind(this);\n        //this.get_price = this.get_price.bind(this);\n\n        this.positions = {} // Symbol: [qty, price]\n\n        this.state = {\n            key_id: 'PKW3I9RKUMW268FBKY4H',\n            //key_id: 'bvqgf2n48v6qg460kck0',\n            secret_key: 'Bvctrlb0EdjfBiX12zWNoS0mwG9qd33V2kgRNusJ',\n\n            \n            positions: null, //array of [Ticker, qty, avg price] arrays\n            streamData: null, //Data from the polygon stream\n\n            stream: 'stocks',\n            //stream: 'forex',\n            ticker: 'XPEV', // Ticker is the active window ticker symbol\n\n            p1: \"USD\",\n            p2: \"CAD\",\n\n            connected: false,\n\n            test: true,\n        }\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n    }\n\n    streamChange(e){\n        //TODO -> What should the behavior here be wrt to the currently active connections?\n        this.setState({stream: e.target.value})\n        //this.disconnect()\n\n        //url state is updated in connect()\n    }\n\n    //Currency Pair Related Functions\n    p1Change(e){\n        this.setState({p1: e.target.value})\n    }\n\n    p2Change(e){\n        this.setState({p2: e.target.value})\n    }\n\n    pairSwap(){\n        let p1Now = this.state.p1\n        let p2Now = this.state.p2\n        this.setState({p1: p2Now})\n        this.setState({p2: p1Now})\n    }\n    //#endregion\n\n    //TODO: This will most likely need to be re-done using the finnhub spec\n    priceListener(msg){\n        //console.log(msg)\n        //console.log(JSON.parse(msg.data).data[0])\n\n        let data = JSON.parse(msg.data)\n        if (data.type === \"trade\"){\n            for (let datum of data.data){\n                //console.log(`${datum.s} traded at ${datum.p} per share`)\n                this.positions[datum.s][\"value\"] = datum.p\n            }\n        }\n        this.setState({positions: this.positions})\n    }\n\n    tradeStatusListener(msg){ //Alpaca trade updates websocket Listener\n        //https://alpaca.markets/docs/api-documentation/api-v2/streaming/\n\n        //console.log(msg)\n        let data = JSON.parse(msg).data\n        if(data.status != null){\n            console.log(`main/tradeStatusListener: Alpaca says ${data.status}`)\n            if(data.status === \"authorized\"){\n                //Subscribe to trade status stream\n                this.ws.alpaca.send(JSON.stringify({\"action\":\"listen\",\"data\":{\"streams\":[\"trade_updates\"]}}))\n            }\n        }else if(data.streams != null){\n            data.streams.forEach(x => {console.log(`main/tradeStatusListener: Alpaca is listening to ${x}`)})\n        }else{\n\n            /*\n                Not 100% sure how to handle order updating in an efficient way.\n                RN I'm just keeping a list of pending orders, which get cleared as they are filled,\n                and a single entry for the previous fill order, so that child components can check it for updates\n\n                Could there maybe be a situation where the child isn't able to process the fill orders before it gets wiped?\n            */\n\n\n            //console.log(`Second branch Alpaca says ${msg}`)\n            //console.log(`Event Type: ${data.event} ${data.order.side}`)\n            //console.log(`Symbol: ${data.order.symbol}`)\n            \n            if(data.event === 'new'){\n                console.log(`main/tradeStatusListener: New order created to ${data.order.side} at ${data.order.limit_price} per share, for ${data.order.qty} shares`)\n                this.positions[data.order.symbol][\"orders\"][data.order.id] = {[data.order.side]: data.order.qty, price: data.order.limit_price, status: \"open\"}\n                //this.positions[data.order.symbol][\"orders\"].push({[data.order.side]: data.order.qty, price: data.order.limit_price, id: data.order.id})\n            }else if (data.event === \"fill\"){\n                console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n                //update order status with fill price\n                //if sell, then check if we've liquidated\n                if(data.order.side === \"sell\" && this.positions[data.order.symbol].qty <= data.order.filled_qty){\n                    //alert(\"Sell filled\")\n                    this.positions[data.order.symbol] = {qty: 0, entry_price: null, exit_price: parseFloat(data.order.filled_avg_price), value: null, orders: {}}\n                }\n\n                this.updatePositions()\n                //this.positions[data.order.symbol][\"orders\"][data.order.id] = {[data.order.side]: data.order.qty, price: data.order.limit_price, fill_price:data.order.filled_avg_price, status: \"closed\"}\n            \n            //TODO: These two\n            }else if(data.event === \"partial_fill\"){\n                //This logic doesn't work properly afaik\n                console.log(\"main/tradeStatusListener: Partial Order Fill\")\n                this.updatePositions()\n                console.log(`main/tradeStatusListener: ${data.order.filled_qty} orders filled at ${data.order.filled_avg_price}`)\n            }else if (data.event === \"canceled\"){\n                console.log(`main/tradeStatusListener: Order ${data.order.id} was canceled`)\n                this.positions[data.order.symbol] = {qty: 0, entry_price: null, exit_price: null, value: null, orders: {}}\n                this.updatePositions()\n                //Log the cancellation; don't delete outright\n                //Child components will listen for updates & update positions once they see them\n            }else{\n                //expired\n                //done_for_day\n                //replaced\n                //Or could be some other stuff\n                console.log(`main/tradeStatusListener: ${data.event}`)\n            }\n        }\n    }\n\n    \n    apiPositionListener(msg){\n        //alert(\"API position listener called\")\n\n        //Get Alpaca positions list\n        for (let position of JSON.parse(msg)){\n            //Only subscribe to ws streams if not already subscribed\n            if(this.positions[position.symbol] == null){\n                this.ws.subscribe(position.symbol)\n            }\n\n            //Price defaults to last day price; will get overwritten by WS stream if live\n            //alert(`Quantity: ${position.qty}`)\n            this.positions[position.symbol] = {qty: position.qty, entry_price: parseFloat(position.avg_entry_price), exit_price: null, value: position.lastday_price, orders: {}}\n        }\n\n        this.setState({positions: this.positions})\n    }\n\n    //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n    updatePositions(){\n        this.api.get_positions(this.apiPositionListener)\n    }\n\n    /*\n    storeConfig(){\n        let res = \"data:application/octet-stream,\"\n        res += encodeURIComponent(JSON.stringify(config))\n        window.open(res);\n    }\n    */\n\n    fhConnect(){\n        //New for Feb 28\n        //Previously only done on polygon ws auth confirm\n        this.ws.subscribe(this.state.ticker)\n        this.updatePositions()\n        this.setState({connected: true})\n    }\n\n\n\n    connect(){\n        //Creates new connections to API and Stream\n        if (this.state.stream === \"stocks\"){\n            this.positions[`${this.state.ticker}`] = {qty: 0, entry_price: null, exit_price: null, value: null, orders: {}}\n            this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n            this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://ws.finnhub.io?token=c0ui7on48v6r6g576j60', 'wss://paper-api.alpaca.markets/stream', this.priceListener, this.tradeStatusListener, this.fhConnect)\n\n            //TODO: Update with existing orders. For now just log\n            this.api.get_orders((msg)=>console.log(`main/connect: Existing Orders: ${msg}`))\n        }else{\n            alert(\"Forex support coming soon!\")\n            this.setState({stream: \"stocks\"})\n            //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n            //this.api = null\n        }\n    }\n\n    disconnect(){\n        for (let symbol in this.positions){\n            this.ws.unsubscribe(symbol)\n        }\n        this.ws.disconnect()\n        this.setState({positions: null})\n        this.setState({connected: false})\n    }\n\n    testClick(){\n        if (this.state.test){\n            this.setState({test:false})\n            console.log(\"Set to false\")\n        }else{\n            this.setState({test:true})\n            console.log(\"Set to true\")\n        }\n    }\n\n    logPos(){\n        this.updatePositions()\n        console.log(JSON.stringify(this.state.positions))\n    }\n\n    clearOrders(symbol, orderID){\n        if (orderID == null){\n            this.positions[symbol][\"orders\"]= null\n        }else{\n            delete this.positions[symbol][\"orders\"][orderID]\n        }\n\n    }\n\n\n    render(){\n        return(\n            <div>\n                {/*\n                <List positions={this.state.positions} api={this.api} updatePositions={this.updatePositions}/>\n                <button onClick={this.storeConfig}>Save List</button>\n                */}\n\n                <div className=\"centered\">                \n                    <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} stream={this.state.stream} p1={this.state.p1} p2={this.state.p2} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} streamChange={this.streamChange} p1Change={this.p1Change} p2Change={this.p2Change} pairSwap={this.pairSwap} connect={this.connect} disconnect={this.disconnect} connected={this.state.connected}/>\n                    \n                    {/*Display Strat box only after price feed is live */}\n                    {this.state.positions != null &&\n                    <BumpStrat test={this.state.test} api={this.api} ticker={this.state.ticker} value={this.state.positions[this.state.ticker][\"value\"]} positions={this.state.positions[this.state.ticker]}/>\n                    }\n\n                    <div className=\"centeredRow\">\n                        {/*Test for updating props */}\n                        <button onClick={this.testClick}>Test</button>\n                        {/*Show Positions in Console */}\n                        <button onClick={this.logPos}>Log Positions</button>\n                    </div>\n            </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Main;","\nimport Main from './Components/main';\nimport './App.css';\n\nfunction App() {\n  return <Main/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}