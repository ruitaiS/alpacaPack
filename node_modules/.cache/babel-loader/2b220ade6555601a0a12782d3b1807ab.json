{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/strats/bump.js\";\nimport { Component } from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar'; //Automatically place limit sell at buy price + delta\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n//Use all available capital to purchase at that price\n//Shares = capital / price\n//Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n//Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n//Place limit order to liquidate\n//limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n//Considerations:\n//Track session percent gains\n//Changing capital allocation should reset session gain tracking\n//Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\nclass BumpStrat extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n    //api - alpaca trade api\n    //ticker - symbol that we're trading on\n    //value - current price of the asset\n    //Functions that need to get bound to this instance\n\n    this.deltaChange = this.deltaChange.bind(this);\n    this.click = this.click.bind(this);\n    this.orderConfirm = this.orderConfirm.bind(this);\n    this.state = {\n      capital: 10000,\n      delta: 0.01,\n      status: \"out\" //out, in, waiting-entry, waiting-exit\n\n    };\n  }\n\n  function() {\n    console.log(\"Hi! :)\");\n  }\n\n  deltaChange(e) {\n    this.setState({\n      delta: e.target.value\n    });\n    console.log(`New Delta: ${this.state.delta}`);\n  }\n\n  capChange(e) {\n    this.setState({\n      capital: e.target.value\n    });\n    console.log(`New Starting Allocation: ${this.state.capital}`); //Reset the statistics too\n  } //This is kind of shitty because it will do it even when it's just the price data changing\n  //Ideally you want to call a function in bump from the parent component\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.test !== this.props.test) {\n      console.log(`Test value changed from ${prevProps.test} to ${this.props.test}`);\n    }\n  }\n\n  orderConfirm(msg) {\n    //API buy callback; stores the confirmation info\n    alert(\"Got Order\"); //console.log(msg)\n  }\n\n  click(price) {\n    if (this.state.status === \"out\") {\n      //Place a limit buy order\n      //On completion, place limit sell @ delta\n      let symbol = this.props.ticker;\n      let qty = Math.floor(this.state.capital / price);\n      let type = \"limit\";\n      let time_in_force = \"gtc\";\n      this.props.api.buy(msg => this.orderConfirm(msg), symbol, qty, type, price, time_in_force);\n    } else if (this.state.status === \"in\") {//Place limit sell\n    } else if (this.state.status === \"waiting-entry\") {//Cancel existing buy order\n    } else if (this.state.status === \"waiting-exit\") {//Cancel sell order\n      //\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Bump Strat\", /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"inputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: `Current Price: $${this.props.value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PCTBar, {\n          pctChange: \"0.1\",\n          width: \"500\",\n          height: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: [\"Capital Allocation: $\", this.state.capital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), this.state.status === \"out\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.capital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.capital,\n            onChange: this.capChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"slider\",\n            children: [\"Delta: $\", this.state.delta]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            type: \"range\",\n            min: \"0\",\n            max: \"10\",\n            step: 0.01,\n            value: this.state.delta,\n            className: \"slider\",\n            id: \"slider\",\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              float: \"right\",\n              width: \"150px\",\n              textAlign: \"center\"\n            },\n            value: this.state.delta,\n            onChange: this.deltaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PriceBtn, {\n          text: this.state.status,\n          click: this.click,\n          value: this.props.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.api.cancel(msg => console.log(msg)),\n          children: \"Cancel All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BumpStrat;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/strats/bump.js"],"names":["Component","PriceBtn","PCTBar","BumpStrat","constructor","props","deltaChange","bind","click","orderConfirm","state","capital","delta","status","function","console","log","e","setState","target","value","capChange","componentDidUpdate","prevProps","test","msg","alert","price","symbol","ticker","qty","Math","floor","type","time_in_force","api","buy","render","float","width","textAlign","cancel"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport PriceBtn from '../priceButton';\nimport PCTBar from '../pctBar';\n\n//Automatically place limit sell at buy price + delta\n\n//Asset defined by user within parent class\n//User defines delta\n//User defines initial capital allocation\n\n//Operation Loop:\n//Not in a position\n//User places buy at a certain price (using price hover button)\n    //Use all available capital to purchase at that price\n    //Shares = capital / price\n    //Have traditional key-in and submit alternative (Optional)\n//Waiting for buy order to fill (should be +/- instant?)\n    //Scroll adjust order price after initial submission (Optional)\n//Alpaca trade status confirms trade\n    //Place limit order to liquidate\n    //limit price = buy price + delta\n//Waiting for sale to complete\n//Alpaca trade status confirms sale\n//Not in a position\n\n//Considerations:\n//Track session percent gains\n    //Changing capital allocation should reset session gain tracking\n    //Changing ticker symbol also resets it\n//Only allow changing capital allocation / symbol while not in a position\n//Changing the delta while still in a position should cancel the existing sell order and place a new one\n//If delta is set to zero then \n//Price hover button should act as limit sell when in a position\n//Secondary exit button without hover, places limit sell at price at time of click\n//Panic button places market sell order\n\n//Similar inverse strategy should exist - sell as it's dipping, re-buy a larger amount of shares at a lower price\n\n\n\nclass BumpStrat extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n        //api - alpaca trade api\n        //ticker - symbol that we're trading on\n        //value - current price of the asset\n        \n\n        //Functions that need to get bound to this instance\n        this.deltaChange = this.deltaChange.bind(this);\n        this.click = this.click.bind(this);\n        this.orderConfirm = this.orderConfirm.bind(this);\n        this.state = {\n            capital: 10000,\n            delta: 0.01,\n\n            status: \"out\", //out, in, waiting-entry, waiting-exit\n        }\n    }\n\n    function(){\n        console.log(\"Hi! :)\")\n    }\n\n    deltaChange(e){\n        this.setState({delta: e.target.value})\n        console.log(`New Delta: ${this.state.delta}`)\n    }\n\n    capChange(e){\n        this.setState({capital: e.target.value})\n        console.log(`New Starting Allocation: ${this.state.capital}`)\n        //Reset the statistics too\n    }\n\n    //This is kind of shitty because it will do it even when it's just the price data changing\n    //Ideally you want to call a function in bump from the parent component\n    componentDidUpdate(prevProps){\n        if (prevProps.test !== this.props.test){\n            console.log(`Test value changed from ${prevProps.test} to ${this.props.test}`)\n        }\n    }\n\n    orderConfirm(msg){\n        //API buy callback; stores the confirmation info\n        alert(\"Got Order\")\n        //console.log(msg)\n    }\n\n    click(price){\n        if (this.state.status === \"out\"){\n            //Place a limit buy order\n            //On completion, place limit sell @ delta\n            let symbol = this.props.ticker\n            let qty = Math.floor(this.state.capital / price)\n            let type = \"limit\"\n            let time_in_force = \"gtc\"\n            this.props.api.buy((msg)=>this.orderConfirm(msg), symbol, qty, type, price, time_in_force)\n            \n        }else if (this.state.status === \"in\"){\n            //Place limit sell\n\n        }else if (this.state.status === \"waiting-entry\"){\n            //Cancel existing buy order\n\n        }else if (this.state.status === \"waiting-exit\"){\n            //Cancel sell order\n            //\n\n        }\n    }\n\n    render(){  \n\n\n\n        return(\n            <div>\n                Bump Strat\n                <fieldset className=\"inputBox\">\n                    <legend>{`Current Price: $${this.props.value}`}</legend>\n                    <PCTBar pctChange=\"0.1\" width=\"500\" height=\"50\"/>\n\n                    <div>\n                        <label htmlFor=\"slider\">Capital Allocation: ${this.state.capital}</label>\n                        {/*Conditionally disable if we're in a position */}\n                        {this.state.status === \"out\" ? \n                            <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                            :\n                            <input disabled style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.capital} onChange={this.capChange}/>\n                        }\n                    </div>\n\n                    <div>\n                        <label htmlFor=\"slider\">Delta: ${this.state.delta}</label>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} type=\"range\" min=\"0\" max=\"10\" step={0.01} value={this.state.delta} className=\"slider\" id=\"slider\" onChange={this.deltaChange}/>\n                        <input style={{float:\"right\", width:\"150px\", textAlign:\"center\"}} value={this.state.delta} onChange={this.deltaChange}/>\n                    </div>\n\n                    <PriceBtn text={this.state.status} click={this.click} value={this.props.value}/>\n                    <button onClick={()=>this.props.api.cancel((msg)=>console.log(msg))}>Cancel All</button>\n                    \n                </fieldset>\n            </div>\n        )\n        \n    }\n}\n\nexport default BumpStrat;"]},"metadata":{},"sourceType":"module"}