{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/pctBar.js\";\nimport { Component } from \"react\";\n\nclass PCTBar extends Component {\n  constructor(props) {\n    super(props); //pctChange\n    //maxWidth\n    //scale\n\n    this.mainStyle = this.mainStyle.bind(this);\n    this.bar = this.bar.bind(this);\n    this.square = this.square.bind(this);\n    this.subPlot = this.subPlot.bind(this);\n    this.subStyle = this.subStyle.bind(this);\n    this.state = {};\n  }\n\n  bar(color) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"68px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this);\n  }\n\n  square(color) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"5px\",\n        width: \"5px\",\n        backgroundColor: color,\n        margin: \"1px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this);\n  }\n\n  subPlot(pct) {\n    let res = [];\n    console.log(pct);\n\n    if (pct > -0.01 && pct < 0.01) {\n      //Placeholder blank bar, otherwise it shifts up b/c missing element\n      res.push(this.bar(\"white\"));\n    } else {\n      //NOTE: This is still a little bit buggy when converting squares into bars\n      if (pct > 0) {\n        for (let i = 0; i <= pct - 0.1; i += 0.1) {\n          res.push(this.bar(\"green\"));\n        }\n\n        for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n          res.push(this.square(\"blue\"));\n        }\n      } else {\n        pct = -pct;\n\n        for (let j = 0; j <= pct % 0.1 - 0.01; j += 0.01) {\n          res.push(this.square(\"blue\"));\n        }\n\n        for (let i = 0; i <= pct - 0.1; i += 0.1) {\n          res.push(this.bar(\"red\"));\n        }\n      }\n    }\n\n    return res;\n  } //Styling for the subplot\n\n\n  subStyle(pct) {\n    if (pct < 0) {\n      let barWidth = Math.trunc(Math.abs(pct) * 100) * 7;\n      return {\n        display: \"flex\",\n        transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`\n      };\n    } else {\n      return {\n        display: \"flex\",\n        transform: `translate(${this.props.maxWidth}px, 0px)`\n      };\n    }\n  } //Styling for the Main Bar\n\n\n  mainStyle(pct) {\n    let barWidth = this.props.maxWidth * Math.abs(pct) * this.props.scale;\n\n    if (pct > 0) {\n      //Positive Change\n      //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n      return {\n        transform: `translate(${this.props.maxWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"green\"\n      };\n    } else {\n      //Negative Change\n      //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n      return {\n        transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,\n        height: \"50px\",\n        width: `${barWidth}px`,\n        backgroundColor: \"red\"\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${this.props.maxWidth * 2}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.subStyle(this.props.pctChange),\n        children: this.subPlot(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.mainStyle(this.props.pctChange)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PCTBar;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/pctBar.js"],"names":["Component","PCTBar","constructor","props","mainStyle","bind","bar","square","subPlot","subStyle","state","color","height","width","backgroundColor","margin","pct","res","console","log","push","i","j","barWidth","Math","trunc","abs","display","transform","maxWidth","scale","render","pctChange"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\n\nclass PCTBar extends Component{\n    constructor(props){\n        super(props);\n        //pctChange\n        //maxWidth\n        //scale\n        this.mainStyle = this.mainStyle.bind(this);\n        this.bar = this.bar.bind(this);\n        this.square = this.square.bind(this);\n        this.subPlot = this.subPlot.bind(this);\n        this.subStyle = this.subStyle.bind(this);\n        this.state = {\n        }\n    }\n\n    bar(color){\n        return (<div style={{height: \"5px\", width: \"68px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    square(color){\n        return (<div style={{height: \"5px\", width: \"5px\", backgroundColor: color, margin: \"1px\"}}></div>)\n    }\n\n    subPlot(pct){\n        let res = []\n        console.log(pct)\n\n        \n        if ((pct > -0.01)&&(pct < 0.01)){\n            //Placeholder blank bar, otherwise it shifts up b/c missing element\n            res.push(this.bar(\"white\"))\n        }else{\n            //NOTE: This is still a little bit buggy when converting squares into bars\n            if (pct > 0){\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"green\"))\n                }\n        \n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\"))\n                }\n            }else{\n                pct = -pct\n                for (let j = 0; j <= pct%0.1-0.01; j += 0.01){\n                    res.push(this.square(\"blue\"))\n                }\n\n                for (let i = 0; i <= pct - 0.1; i += 0.1){\n                    res.push(this.bar(\"red\"))\n                }\n            }            \n        }\n\n\n\n\n        return res\n    }\n\n    //Styling for the subplot\n    subStyle(pct){\n        if (pct < 0){\n            let barWidth = (Math.trunc(Math.abs(pct)*100))*7\n            return {display:\"flex\", transform: `translate(${this.props.maxWidth-barWidth}px, 0px)`}\n        }else{\n            return {display:\"flex\", transform: `translate(${this.props.maxWidth}px, 0px)`}\n        }\n\n    }\n\n    //Styling for the Main Bar\n    mainStyle(pct){\n        let barWidth = this.props.maxWidth * Math.abs(pct) * this.props.scale\n        if (pct > 0){\n            //Positive Change\n            //return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}`, backgroundColor: \"green\"}\n            return{transform: `translate(${this.props.maxWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"green\"}\n        }else{\n            //Negative Change\n            //return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`,height: \"50px\", width: `${barWidth}`, backgroundColor: \"red\"}\n            return{transform: `translate(${this.props.maxWidth - barWidth}px, 0px)`, height: \"50px\", width: `${barWidth}px`, backgroundColor: \"red\"}\n        }\n    }\n\n    render(){\n        return(\n            <div style={{width:`${this.props.maxWidth*2}`}}>\n                <div style={this.subStyle(this.props.pctChange)}>{this.subPlot(this.props.pctChange)}</div>\n                <div style={this.mainStyle(this.props.pctChange)}></div>\n            </div>\n        )\n        \n    }\n}\n\nexport default PCTBar;"]},"metadata":{},"sourceType":"module"}