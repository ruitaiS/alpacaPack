{"ast":null,"code":"//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n//Uses the finnhub websocket for trades\n//https://finnhub.io/docs/api/websocket-trades\n//TODO: This will need different methods depending on which websocket is being used, since they all seem to have different formats and standards\n//For now just use the stocks endpoint to build everything out\nclass Stream {\n  //constructor(key_id, url, callback){\n  constructor(key_id, secret_key, finnhubURL, alpacaURL, finnhubCallback, alpacaCallback, fhConnect) {\n    this.finnhub = new WebSocket(finnhubURL); //Live Price Stream\n\n    this.alpaca = new WebSocket(alpacaURL); //Trade Status Updates Stream\n    //this.subscriptionList = [];\n    //Send Authentication Message On Open:\n    //TODO: Error handling on failure to authenticate        \n\n    this.finnhub.onopen = () => {\n      console.log(\"Connected to FinnHub Price Stream\");\n      fhConnect(); //this.polygon.send(JSON.stringify({\"action\":\"auth\",\"params\": key_id}))\n    };\n\n    this.alpaca.onopen = () => {\n      console.log(\"Authenticating Alpaca Trade Updates Stream\");\n      this.alpaca.send(JSON.stringify({\n        \"action\": \"authenticate\",\n        \"data\": {\n          \"key_id\": key_id,\n          \"secret_key\": secret_key\n        }\n      }));\n    }; //TODO: Could I just use onmessage = callback(msg)?\n\n\n    this.finnhub.onmessage = msg => {\n      finnhubCallback(msg);\n    };\n\n    this.alpaca.onmessage = msg => {\n      //msg.data is a blob containing a promise\n      //text() uncovers the promise, then() is the callback on promise resolution\n      //res is the actual json string\n      msg.data.text().then(res => {\n        alpacaCallback(res);\n      });\n    };\n\n    this.finnhub.onclose = () => {\n      console.log(\"Disconnected from Price Stream\");\n    };\n\n    this.alpaca.onclose = () => {\n      console.log(\"Disconnected from Trade Updates Stream\");\n    };\n  } //For Trade Stream Only:\n\n\n  subscribe(ticker) {\n    console.log(`Subscribing to ${ticker}`);\n    this.finnhub.send(JSON.stringify({\n      'type': 'subscribe',\n      'symbol': ticker\n    }));\n  }\n\n  unsubscribe(ticker) {\n    console.log(`Unsubscribing from ${ticker}`);\n    this.finnhub.send(JSON.stringify({\n      'type': 'unsubscribe',\n      'symbol': ticker\n    }));\n  }\n\n  disconnect() {\n    this.finnhub.close();\n    this.alpaca.close();\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/stream.js"],"names":["Stream","constructor","key_id","secret_key","finnhubURL","alpacaURL","finnhubCallback","alpacaCallback","fhConnect","finnhub","WebSocket","alpaca","onopen","console","log","send","JSON","stringify","onmessage","msg","data","text","then","res","onclose","subscribe","ticker","unsubscribe","disconnect","close"],"mappings":"AAAA;AACA;AAEA;AACA;AAGA;AACA;AAEA,MAAMA,MAAN,CAAY;AACR;AACAC,EAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqBC,UAArB,EAAiCC,SAAjC,EAA4CC,eAA5C,EAA6DC,cAA7D,EAA6EC,SAA7E,EAAuF;AAC9F,SAAKC,OAAL,GAAe,IAAIC,SAAJ,CAAcN,UAAd,CAAf,CAD8F,CACrD;;AACzC,SAAKO,MAAL,GAAc,IAAID,SAAJ,CAAcL,SAAd,CAAd,CAF8F,CAEvD;AAGvC;AAEA;AACA;;AACA,SAAKI,OAAL,CAAaG,MAAb,GAAsB,MAAM;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAN,MAAAA,SAAS,GAFe,CAGxB;AACH,KAJD;;AAKA,SAAKG,MAAL,CAAYC,MAAZ,GAAqB,MAAM;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACA,WAAKH,MAAL,CAAYI,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAS,cAAV;AAAyB,gBAAQ;AAAC,oBAAUf,MAAX;AAAmB,wBAAaC;AAAhC;AAAjC,OAAf,CAAjB;AACH,KAHD,CAd8F,CAmB9F;;;AACA,SAAKM,OAAL,CAAaS,SAAb,GAAyBC,GAAG,IAAI;AAC5Bb,MAAAA,eAAe,CAACa,GAAD,CAAf;AACH,KAFD;;AAGA,SAAKR,MAAL,CAAYO,SAAZ,GAAwBC,GAAG,IAAI;AAC3B;AACA;AACA;AACAA,MAAAA,GAAG,CAACC,IAAJ,CAASC,IAAT,GAAgBC,IAAhB,CAAqBC,GAAG,IAAI;AACxBhB,QAAAA,cAAc,CAACgB,GAAD,CAAd;AACH,OAFD;AAGH,KAPD;;AASA,SAAKd,OAAL,CAAae,OAAb,GAAuB,MAAK;AACxBX,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,KAFD;;AAGA,SAAKH,MAAL,CAAYa,OAAZ,GAAsB,MAAK;AACvBX,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH,KAFD;AAGH,GAxCO,CA0CR;;;AACAW,EAAAA,SAAS,CAACC,MAAD,EAAQ;AACbb,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBY,MAAO,EAArC;AACA,SAAKjB,OAAL,CAAaM,IAAb,CAAkBC,IAAI,CAACC,SAAL,CAAe;AAAC,cAAO,WAAR;AAAqB,gBAAUS;AAA/B,KAAf,CAAlB;AACH;;AAEDC,EAAAA,WAAW,CAACD,MAAD,EAAQ;AACfb,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBY,MAAO,EAAzC;AACA,SAAKjB,OAAL,CAAaM,IAAb,CAAkBC,IAAI,CAACC,SAAL,CAAe;AAAC,cAAO,aAAR;AAAuB,gBAAUS;AAAjC,KAAf,CAAlB;AACH;;AAEDE,EAAAA,UAAU,GAAE;AACR,SAAKnB,OAAL,CAAaoB,KAAb;AACA,SAAKlB,MAAL,CAAYkB,KAAZ;AACH;;AAxDO;;AA2DZ,eAAe7B,MAAf","sourcesContent":["//Based on:\n//https://dev.to/finallynero/using-websockets-in-react-4fkp\n\n//Uses the finnhub websocket for trades\n//https://finnhub.io/docs/api/websocket-trades\n\n\n//TODO: This will need different methods depending on which websocket is being used, since they all seem to have different formats and standards\n//For now just use the stocks endpoint to build everything out\n\nclass Stream{\n    //constructor(key_id, url, callback){\n    constructor(key_id, secret_key, finnhubURL, alpacaURL, finnhubCallback, alpacaCallback, fhConnect){\n        this.finnhub = new WebSocket(finnhubURL) //Live Price Stream\n        this.alpaca = new WebSocket(alpacaURL) //Trade Status Updates Stream\n\n\n        //this.subscriptionList = [];\n\n        //Send Authentication Message On Open:\n        //TODO: Error handling on failure to authenticate        \n        this.finnhub.onopen = () => {\n            console.log(\"Connected to FinnHub Price Stream\")\n            fhConnect()\n            //this.polygon.send(JSON.stringify({\"action\":\"auth\",\"params\": key_id}))\n        }\n        this.alpaca.onopen = () => {\n            console.log(\"Authenticating Alpaca Trade Updates Stream\")\n            this.alpaca.send(JSON.stringify({\"action\":\"authenticate\",\"data\": {\"key_id\": key_id, \"secret_key\":secret_key}}))\n        }\n\n        //TODO: Could I just use onmessage = callback(msg)?\n        this.finnhub.onmessage = msg => {\n            finnhubCallback(msg)\n        }\n        this.alpaca.onmessage = msg => {\n            //msg.data is a blob containing a promise\n            //text() uncovers the promise, then() is the callback on promise resolution\n            //res is the actual json string\n            msg.data.text().then(res => {\n                alpacaCallback(res)\n            })\n        }\n\n        this.finnhub.onclose = () =>{\n            console.log(\"Disconnected from Price Stream\")\n        }\n        this.alpaca.onclose = () =>{\n            console.log(\"Disconnected from Trade Updates Stream\")\n        }\n    }\n\n    //For Trade Stream Only:\n    subscribe(ticker){\n        console.log(`Subscribing to ${ticker}`)\n        this.finnhub.send(JSON.stringify({'type':'subscribe', 'symbol': ticker}))\n    }\n\n    unsubscribe(ticker){\n        console.log(`Unsubscribing from ${ticker}`)\n        this.finnhub.send(JSON.stringify({'type':'unsubscribe', 'symbol': ticker}))\n    }\n\n    disconnect(){\n        this.finnhub.close()\n        this.alpaca.close()\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}