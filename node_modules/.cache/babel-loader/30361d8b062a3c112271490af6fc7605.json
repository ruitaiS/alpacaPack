{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ruitai/alpaca/frontend/src/Components/main.js\";\nimport { Component } from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\nimport List from './list';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props); //Values that get passed to the component\n\n    this.tickerChange = this.tickerChange.bind(this);\n    this.idChange = this.idChange.bind(this);\n    this.skChange = this.skChange.bind(this);\n    this.streamChange = this.streamChange.bind(this);\n    this.p1Change = this.p1Change.bind(this);\n    this.p2Change = this.p2Change.bind(this);\n    this.pairSwap = this.pairSwap.bind(this);\n    this.priceListener = this.priceListener.bind(this);\n    this.tradeStatusListener = this.tradeStatusListener.bind(this);\n    this.apiPositionListener = this.apiPositionListener.bind(this);\n    this.connect = this.connect.bind(this);\n    this.updatePositions = this.updatePositions.bind(this); //this.subscribe = this.subscribe.bind(this);\n    //this.unsubscribe = this.unsubscribe.bind(this);\n    //this.initPositions = this.initPositions.bind(this);\n    //this.get_price = this.get_price.bind(this);\n\n    this.positions = {}; // Symbol: [qty, price]\n\n    this.state = {\n      key_id: 'PK5YYD0RTSIBEH5O4IG7',\n      //key_id: 'bvqgf2n48v6qg460kck0',\n      secret_key: 'vbrBfUR0BkmsjtR13sB0mxqYOPQqaR67ARJoZO4P',\n      positions: null,\n      //array of [Ticker, qty, avg price] arrays\n      streamData: null,\n      //Data from the polygon stream\n      stream: 'stocks',\n      //stream: 'forex',\n      ticker: 'MSFT',\n      // Ticker is the active window ticker symbol\n      p1: \"USD\",\n      p2: \"CAD\"\n    };\n  } //#region Onchange Functions (Called from Control Panel)\n  //TODO: May need to update the websocket stream & also the api handler\n  //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n  //Need to directly use e.target.value\n\n\n  tickerChange(e) {\n    this.setState({\n      ticker: e.target.value\n    });\n  }\n\n  idChange(e) {\n    this.setState({\n      key_id: e.target.value\n    });\n  }\n\n  skChange(e) {\n    this.setState({\n      secret_key: e.target.value\n    });\n  }\n\n  streamChange(e) {\n    //TODO -> What should the behavior here be wrt to the currently active connections?\n    this.setState({\n      stream: e.target.value\n    }); //this.disconnect()\n    //url state is updated in connect()\n  } //Currency Pair Related Functions\n\n\n  p1Change(e) {\n    this.setState({\n      p1: e.target.value\n    });\n  }\n\n  p2Change(e) {\n    this.setState({\n      p2: e.target.value\n    });\n  }\n\n  pairSwap() {\n    let p1Now = this.state.p1;\n    let p2Now = this.state.p2;\n    this.setState({\n      p1: p2Now\n    });\n    this.setState({\n      p2: p1Now\n    });\n  } //#endregion\n\n\n  priceListener(msg) {\n    //websocket callback; parses incoming data and updates state\n    let data = JSON.parse(msg.data);\n\n    if (data[0].message != null) {\n      console.log(`Polygon says ${data[0].message}`); //initialize positions after authentication confirmation\n\n      if (data[0].message === 'authenticated') {\n        //TODO: How to handle the active window?\n        //this.ws.subscribe(this.state.ticker)\n        //Get Position List After Websocket Confirm\n        //alert(\"Getting Positions\")\n        this.updatePositions();\n      }\n    } else {\n      //Message is null, so we assume we're subscribed, and getting price data\n      //console.log(JSON.stringify(data))\n      //this.setState({streamData: data})\n      //Data from WS comes in Asynchronously, so we update the position dict\n      for (let datum of data) {\n        this.positions[datum.sym][\"price\"] = datum.p;\n      } //alert(\"Setting Positions\")\n\n\n      this.setState({\n        positions: this.positions\n      });\n    }\n  }\n\n  tradeStatusListener(msg) {\n    //Alpaca trade updates websocket Listener\n    console.log(`Alpaca says ${msg}`);\n    let data = JSON.parse(msg.data);\n\n    if (data.data.status == \"authorized\") {\n      alert(\"Trade status stream auth\");\n    }\n  }\n\n  apiPositionListener(msg) {\n    //alert(\"API position listener called\")\n    //Get Alpaca positions list\n    for (let position of JSON.parse(msg)) {\n      //Only subscribe to ws streams if not already subscribed\n      if (this.positions[position.symbol] == null) {\n        this.ws.subscribe(position.symbol);\n      } //Price defaults to last day price; will get overwritten by WS stream if live\n      //alert(`Quantity: ${position.qty}`)\n\n\n      this.positions[position.symbol] = {\n        qty: position.qty,\n        cost: position.avg_entry_price,\n        price: position.lastday_price\n      };\n    }\n\n    this.setState({\n      positions: this.positions\n    });\n  } //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n\n\n  updatePositions() {\n    this.api.get_positions(this.apiPositionListener);\n  }\n\n  connect() {\n    //Creates new connections to API and Stream\n    if (this.state.stream === \"stocks\") {\n      this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets');\n      this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://socket.polygon.io/stocks', 'wss://data.alpaca.markets/stream', this.priceListener, this.tradeStatusListener);\n    } else {\n      alert(\"Forex support coming soon!\");\n      this.setState({\n        stream: \"stocks\"\n      }); //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n      //this.api = null\n    }\n  }\n\n  disconnect() {//TODO\n    //this.ws.disconnect()\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        positions: this.state.positions,\n        api: this.api,\n        updatePositions: this.updatePositions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Control, {\n        key_id: this.state.key_id,\n        secret_key: this.state.secret_key,\n        ticker: this.state.ticker,\n        stream: this.state.stream,\n        p1: this.state.p1,\n        p2: this.state.p2,\n        idChange: this.idChange,\n        skChange: this.skChange,\n        tickerChange: this.tickerChange,\n        streamChange: this.streamChange,\n        p1Change: this.p1Change,\n        p2Change: this.p2Change,\n        pairSwap: this.pairSwap,\n        connect: this.connect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/ruitai/alpaca/frontend/src/Components/main.js"],"names":["Component","Control","API","Stream","List","Main","constructor","props","tickerChange","bind","idChange","skChange","streamChange","p1Change","p2Change","pairSwap","priceListener","tradeStatusListener","apiPositionListener","connect","updatePositions","positions","state","key_id","secret_key","streamData","stream","ticker","p1","p2","e","setState","target","value","p1Now","p2Now","msg","data","JSON","parse","message","console","log","datum","sym","p","status","alert","position","symbol","ws","subscribe","qty","cost","avg_entry_price","price","lastday_price","api","get_positions","disconnect","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport Control from './control';\nimport API from './apiHandler';\nimport Stream from \"./stream\";\n\nimport List from './list';\n\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        //Values that get passed to the component\n\n        this.tickerChange = this.tickerChange.bind(this);\n        this.idChange = this.idChange.bind(this);\n        this.skChange = this.skChange.bind(this);\n        this.streamChange = this.streamChange.bind(this);\n\n        this.p1Change = this.p1Change.bind(this);\n        this.p2Change = this.p2Change.bind(this);\n        this.pairSwap = this.pairSwap.bind(this);\n\n        this.priceListener = this.priceListener.bind(this);\n        this.tradeStatusListener = this.tradeStatusListener.bind(this);\n        this.apiPositionListener = this.apiPositionListener.bind(this);\n        this.connect = this.connect.bind(this);\n        this.updatePositions = this.updatePositions.bind(this);\n\n        //this.subscribe = this.subscribe.bind(this);\n        //this.unsubscribe = this.unsubscribe.bind(this);\n\n        //this.initPositions = this.initPositions.bind(this);\n        //this.get_price = this.get_price.bind(this);\n\n        this.positions = {} // Symbol: [qty, price]\n\n        this.state = {\n            key_id: 'PK5YYD0RTSIBEH5O4IG7',\n            //key_id: 'bvqgf2n48v6qg460kck0',\n            secret_key: 'vbrBfUR0BkmsjtR13sB0mxqYOPQqaR67ARJoZO4P',\n\n            \n            positions: null, //array of [Ticker, qty, avg price] arrays\n            streamData: null, //Data from the polygon stream\n\n            stream: 'stocks',\n            //stream: 'forex',\n            ticker: 'MSFT', // Ticker is the active window ticker symbol\n\n            p1: \"USD\",\n            p2: \"CAD\",\n        }\n    }\n\n    //#region Onchange Functions (Called from Control Panel)\n    //TODO: May need to update the websocket stream & also the api handler\n    //NOTE: Using this.state.[whatever] after setState doesn't seem to update it until the next iteration;\n    //Need to directly use e.target.value\n    tickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n    idChange(e) {\n        this.setState({key_id: e.target.value});\n    }\n    skChange(e) {\n        this.setState({secret_key: e.target.value});\n    }\n\n    streamChange(e){\n        //TODO -> What should the behavior here be wrt to the currently active connections?\n        this.setState({stream: e.target.value})\n        //this.disconnect()\n\n        //url state is updated in connect()\n    }\n\n    //Currency Pair Related Functions\n    p1Change(e){\n        this.setState({p1: e.target.value})\n    }\n\n    p2Change(e){\n        this.setState({p2: e.target.value})\n    }\n\n    pairSwap(){\n        let p1Now = this.state.p1\n        let p2Now = this.state.p2\n        this.setState({p1: p2Now})\n        this.setState({p2: p1Now})\n    }\n    //#endregion\n\n    \n    priceListener(msg){ //websocket callback; parses incoming data and updates state\n        let data = JSON.parse(msg.data)\n        if (data[0].message != null){\n            console.log(`Polygon says ${data[0].message}`)\n            //initialize positions after authentication confirmation\n            if (data[0].message === 'authenticated'){\n                //TODO: How to handle the active window?\n                //this.ws.subscribe(this.state.ticker)\n\n                //Get Position List After Websocket Confirm\n                //alert(\"Getting Positions\")\n                this.updatePositions()\n            }\n        }else{//Message is null, so we assume we're subscribed, and getting price data\n            //console.log(JSON.stringify(data))\n            //this.setState({streamData: data})\n\n            //Data from WS comes in Asynchronously, so we update the position dict\n            for (let datum of data){\n                this.positions[datum.sym][\"price\"] = datum.p\n            }\n            //alert(\"Setting Positions\")\n            this.setState({positions: this.positions})\n        }\n    }\n\n    tradeStatusListener(msg){ //Alpaca trade updates websocket Listener\n        console.log(`Alpaca says ${msg}`)\n        let data = JSON.parse(msg.data)\n        if(data.data.status == \"authorized\"){\n            alert(\"Trade status stream auth\")\n        }\n    }\n\n    \n    apiPositionListener(msg){\n        //alert(\"API position listener called\")\n\n        //Get Alpaca positions list\n        for (let position of JSON.parse(msg)){\n            //Only subscribe to ws streams if not already subscribed\n            if(this.positions[position.symbol] == null){\n                this.ws.subscribe(position.symbol)\n            }\n\n            //Price defaults to last day price; will get overwritten by WS stream if live\n            //alert(`Quantity: ${position.qty}`)\n            this.positions[position.symbol] = {qty: position.qty, cost: position.avg_entry_price, price: position.lastday_price}\n        }\n\n        this.setState({positions: this.positions})\n    }\n\n    //Get new positions from Alpaca without subscribing (Called after sell/buy orders) \n    updatePositions(){\n        this.api.get_positions(this.apiPositionListener)\n    }\n\n    connect(){\n        //Creates new connections to API and Stream\n        if (this.state.stream === \"stocks\"){\n            this.api = new API(this.state.key_id, this.state.secret_key, 'https://paper-api.alpaca.markets')\n            this.ws = new Stream(this.state.key_id, this.state.secret_key, 'wss://socket.polygon.io/stocks', 'wss://data.alpaca.markets/stream', this.priceListener, this.tradeStatusListener)       \n        }else{\n            alert(\"Forex support coming soon!\")\n            this.setState({stream: \"stocks\"})\n            //this.ws = new Stream(this.state.key_id, `wss://ws.finnhub.io?token=${this.state.key_id}`, this.priceListener)\n            //this.api = null\n        }\n    }\n\n    disconnect(){\n        //TODO\n        //this.ws.disconnect()\n\n    }\n\n\n    render(){\n        return(\n            <div>\n                <List positions={this.state.positions} api={this.api} updatePositions={this.updatePositions}/>\n                <Control key_id={this.state.key_id} secret_key={this.state.secret_key} ticker={this.state.ticker} stream={this.state.stream} p1={this.state.p1} p2={this.state.p2} idChange={this.idChange} skChange={this.skChange} tickerChange={this.tickerChange} streamChange={this.streamChange} p1Change={this.p1Change} p2Change={this.p2Change} pairSwap={this.pairSwap} connect={this.connect}/>\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}